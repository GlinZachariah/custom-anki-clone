{"version":3,"file":"data-D7J2CIs4.js","sources":["../../src/topics/api/data.ts"],"sourcesContent":["import { Category, CategoryData, Flashcard, QuizQuestion } from '../../types';\n\nexport const categoryData: Record<Category, CategoryData> = {\n  basics: {\n    name: 'API Basics',\n    description: 'REST fundamentals, HTTP methods, status codes, and API design principles',\n    color: '#FF6B6B'\n  },\n  intermediate: {\n    name: 'API Intermediate',\n    description: 'Authentication, documentation, versioning, and error handling',\n    color: '#E55555'\n  },\n  expert: {\n    name: 'API Expert',\n    description: 'Advanced patterns, security, performance, and best practices',\n    color: '#CC4444'\n  }\n};\n\nexport const flashcards: Flashcard[] = [\n  // BASICS FLASHCARDS (25 cards)\n  {\n    id: 1,\n    category: 'basics',\n    question: 'What is a REST API?',\n    answer: 'REST (Representational State Transfer) is an architectural style for designing web services. It uses standard HTTP methods and follows principles like statelessness, uniform interface, and resource-based URLs to create scalable and maintainable APIs.'\n  },\n  {\n    id: 2,\n    category: 'basics',\n    question: 'What are the main HTTP methods used in REST APIs?',\n    answer: 'The main HTTP methods are: GET (retrieve data), POST (create new resources), PUT (update/replace entire resources), PATCH (partial updates), DELETE (remove resources), HEAD (get headers only), and OPTIONS (check allowed methods).'\n  },\n  {\n    id: 3,\n    category: 'basics',\n    question: 'What does HTTP status code 200 mean?',\n    answer: 'HTTP 200 OK indicates that the request was successful. The server has processed the request successfully and is returning the requested data in the response body.'\n  },\n  {\n    id: 4,\n    category: 'basics',\n    question: 'What does HTTP status code 404 mean?',\n    answer: 'HTTP 404 Not Found indicates that the requested resource could not be found on the server. The URL may be incorrect or the resource may have been deleted or moved.'\n  },\n  {\n    id: 5,\n    category: 'basics',\n    question: 'What is the difference between PUT and POST?',\n    answer: 'POST is used to create new resources and is not idempotent (repeated calls create multiple resources). PUT is used to create or replace entire resources and is idempotent (repeated calls have the same effect).'\n  },\n  {\n    id: 6,\n    category: 'basics',\n    question: 'What are REST API design principles?',\n    answer: 'Key principles include: 1) Stateless - each request contains all necessary information, 2) Uniform interface - consistent resource naming and HTTP methods, 3) Client-server separation, 4) Cacheable responses, 5) Layered system architecture, 6) Code-on-demand (optional).'\n  },\n  {\n    id: 7,\n    category: 'basics',\n    question: 'What is a resource in REST API context?',\n    answer: 'A resource is any information that can be named and addressed through a URI. Resources are the fundamental concept in REST - they represent entities like users, products, or orders, and are manipulated using standard HTTP methods.'\n  },\n  {\n    id: 8,\n    category: 'basics',\n    question: 'What does HTTP status code 201 mean?',\n    answer: 'HTTP 201 Created indicates that the request was successful and a new resource has been created. It\\'s typically returned after successful POST requests that create new entities.'\n  },\n  {\n    id: 9,\n    category: 'basics',\n    question: 'What is the purpose of HTTP headers?',\n    answer: 'HTTP headers provide additional information about the request or response. They include metadata like content type, authorization tokens, caching directives, user agent information, and custom application-specific data.'\n  },\n  {\n    id: 10,\n    category: 'basics',\n    question: 'What does HTTP status code 400 mean?',\n    answer: 'HTTP 400 Bad Request indicates that the server cannot process the request due to client error, such as invalid syntax, malformed request, or invalid parameters.'\n  },\n  {\n    id: 11,\n    category: 'basics',\n    question: 'What is JSON and why is it commonly used in APIs?',\n    answer: 'JSON (JavaScript Object Notation) is a lightweight, text-based data interchange format. It\\'s commonly used in APIs because it\\'s human-readable, language-independent, supports complex data structures, and is easy to parse and generate.'\n  },\n  {\n    id: 12,\n    category: 'basics',\n    question: 'What is a URL path parameter?',\n    answer: 'Path parameters are variable parts of a URL path that identify specific resources. For example, in `/users/{id}`, `{id}` is a path parameter that specifies which user to retrieve, like `/users/123`.'\n  },\n  {\n    id: 13,\n    category: 'basics',\n    question: 'What are query parameters in URLs?',\n    answer: 'Query parameters are key-value pairs appended to a URL after a `?` symbol, separated by `&`. They\\'re used for filtering, sorting, pagination, or passing optional data. Example: `/users?page=2&limit=10&sort=name`.'\n  },\n  {\n    id: 14,\n    category: 'basics',\n    question: 'What does HTTP status code 500 mean?',\n    answer: 'HTTP 500 Internal Server Error indicates that the server encountered an unexpected condition that prevented it from fulfilling the request. It\\'s a generic error message for server-side issues.'\n  },\n  {\n    id: 15,\n    category: 'basics',\n    question: 'What is the Content-Type header?',\n    answer: 'Content-Type header specifies the media type of the request or response body. Common values include `application/json` for JSON data, `application/xml` for XML, and `text/html` for HTML content.'\n  },\n  {\n    id: 16,\n    category: 'basics',\n    question: 'What does HTTP status code 401 mean?',\n    answer: 'HTTP 401 Unauthorized indicates that the request requires authentication. The client must provide valid credentials to access the resource.'\n  },\n  {\n    id: 17,\n    category: 'basics',\n    question: 'What does HTTP status code 403 mean?',\n    answer: 'HTTP 403 Forbidden indicates that the server understood the request but refuses to authorize it. The client may be authenticated but lacks permission to access the resource.'\n  },\n  {\n    id: 18,\n    category: 'basics',\n    question: 'What is API endpoint?',\n    answer: 'An API endpoint is a specific URL where an API can be accessed by a client application. It represents a touchpoint of communication between the client and server, typically combining a base URL with a resource path.'\n  },\n  {\n    id: 19,\n    category: 'basics',\n    question: 'What is the difference between PATCH and PUT?',\n    answer: 'PUT replaces the entire resource with the provided data, while PATCH applies partial modifications to a resource. PUT requires sending the complete resource representation, whereas PATCH only sends the fields to be changed.'\n  },\n  {\n    id: 20,\n    category: 'basics',\n    question: 'What does stateless mean in REST APIs?',\n    answer: 'Stateless means that each API request must contain all the information necessary to process it. The server doesn\\'t store any client context between requests, making the system more scalable and reliable.'\n  },\n  {\n    id: 21,\n    category: 'basics',\n    question: 'What is a base URL in API context?',\n    answer: 'A base URL is the root URL for an API that precedes all endpoint paths. For example, if the base URL is `https://api.example.com/v1`, then the full endpoint URL would be `https://api.example.com/v1/users`.'\n  },\n  {\n    id: 22,\n    category: 'basics',\n    question: 'What are HTTP response codes in the 2xx range?',\n    answer: '2xx status codes indicate success. Common ones include: 200 (OK), 201 (Created), 202 (Accepted), 204 (No Content). They tell the client that the request was received, understood, and accepted.'\n  },\n  {\n    id: 23,\n    category: 'basics',\n    question: 'What are HTTP response codes in the 4xx range?',\n    answer: '4xx status codes indicate client errors. Common ones include: 400 (Bad Request), 401 (Unauthorized), 403 (Forbidden), 404 (Not Found), 405 (Method Not Allowed). They indicate issues with the client request.'\n  },\n  {\n    id: 24,\n    category: 'basics',\n    question: 'What is idempotency in REST APIs?',\n    answer: 'Idempotency means that making multiple identical requests has the same effect as making a single request. GET, PUT, and DELETE are idempotent, while POST is not. This property is important for reliability and retry logic.'\n  },\n  {\n    id: 25,\n    category: 'basics',\n    question: 'What is the Accept header?',\n    answer: 'The Accept header tells the server what media types the client can process. For example, `Accept: application/json` indicates the client prefers JSON responses. It helps with content negotiation.'\n  },\n\n  // INTERMEDIATE FLASHCARDS (25 cards)\n  {\n    id: 26,\n    category: 'intermediate',\n    question: 'What is API authentication?',\n    answer: 'API authentication is the process of verifying the identity of clients making API requests. Common methods include API keys, OAuth 2.0, JWT tokens, and basic authentication. It ensures only authorized users can access protected resources.'\n  },\n  {\n    id: 27,\n    category: 'intermediate',\n    question: 'What is an API key and how is it used?',\n    answer: 'An API key is a unique identifier used to authenticate API requests. It\\'s typically passed in headers (Authorization or X-API-Key), query parameters, or request body. API keys are simple but should be kept secret and rotated regularly.'\n  },\n  {\n    id: 28,\n    category: 'intermediate',\n    question: 'What is OAuth 2.0?',\n    answer: 'OAuth 2.0 is an authorization framework that enables applications to obtain limited access to user accounts. It provides secure delegated access without sharing passwords, using access tokens with defined scopes and expiration times.'\n  },\n  {\n    id: 29,\n    category: 'intermediate',\n    question: 'What is a JWT (JSON Web Token)?',\n    answer: 'JWT is a compact, URL-safe token format for securely transmitting information between parties. It consists of header, payload, and signature, encoded in Base64. JWTs are self-contained and can be verified without server-side storage.'\n  },\n  {\n    id: 30,\n    category: 'intermediate',\n    question: 'What is API versioning and why is it important?',\n    answer: 'API versioning allows multiple versions of an API to coexist, enabling backward compatibility while introducing new features. Common approaches include URL versioning (/v1/users), header versioning, or parameter versioning.'\n  },\n  {\n    id: 31,\n    category: 'intermediate',\n    question: 'What are common API versioning strategies?',\n    answer: 'Common strategies include: 1) URI versioning (/v1/users), 2) Query parameter (?version=1), 3) Header versioning (API-Version: 1), 4) Content negotiation (Accept: application/vnd.api+json;version=1). Each has trade-offs for maintainability and client adoption.'\n  },\n  {\n    id: 32,\n    category: 'intermediate',\n    question: 'What is API documentation and why is it crucial?',\n    answer: 'API documentation provides comprehensive information about endpoints, parameters, request/response formats, authentication, and examples. Good documentation improves developer experience, reduces support burden, and accelerates API adoption.'\n  },\n  {\n    id: 33,\n    category: 'intermediate',\n    question: 'What is OpenAPI (Swagger) specification?',\n    answer: 'OpenAPI is a standard specification for describing REST APIs. It defines API structure, endpoints, request/response schemas, authentication methods, and examples in a machine-readable format, enabling automatic documentation and code generation.'\n  },\n  {\n    id: 34,\n    category: 'intermediate',\n    question: 'What is pagination in APIs?',\n    answer: 'Pagination divides large datasets into smaller, manageable chunks. Common approaches include offset-based (page/limit), cursor-based (next/previous tokens), and link-based pagination. It improves performance and user experience for large result sets.'\n  },\n  {\n    id: 35,\n    category: 'intermediate',\n    question: 'What is API error handling?',\n    answer: 'API error handling involves returning appropriate HTTP status codes, detailed error messages, and consistent error response formats. Good error handling helps developers understand and resolve issues quickly, improving the overall API experience.'\n  },\n  {\n    id: 36,\n    category: 'intermediate',\n    question: 'What should a good API error response include?',\n    answer: 'A good error response should include: HTTP status code, error code/identifier, human-readable message, detailed description, timestamp, request ID for tracking, and sometimes suggestions for resolution or links to documentation.'\n  },\n  {\n    id: 37,\n    category: 'intermediate',\n    question: 'What is CORS (Cross-Origin Resource Sharing)?',\n    answer: 'CORS is a security mechanism that allows web pages to make requests to different domains than the one serving the page. It uses HTTP headers to control which origins can access resources, preventing unauthorized cross-domain requests.'\n  },\n  {\n    id: 38,\n    category: 'intermediate',\n    question: 'What are CORS preflight requests?',\n    answer: 'Preflight requests are OPTIONS requests sent by browsers before certain cross-origin requests to check if the actual request is allowed. They occur for non-simple requests (custom headers, certain content types, or non-GET/POST methods).'\n  },\n  {\n    id: 39,\n    category: 'intermediate',\n    question: 'What is API rate limiting?',\n    answer: 'Rate limiting controls the number of requests a client can make within a time window. It prevents abuse, ensures fair usage, and protects server resources. Common strategies include token bucket, leaky bucket, and fixed/sliding window approaches.'\n  },\n  {\n    id: 40,\n    category: 'intermediate',\n    question: 'What headers are used for rate limiting information?',\n    answer: 'Common rate limiting headers include: X-RateLimit-Limit (total allowed requests), X-RateLimit-Remaining (remaining requests), X-RateLimit-Reset (reset time), and Retry-After (when to retry after hitting limits).'\n  },\n  {\n    id: 41,\n    category: 'intermediate',\n    question: 'What is content negotiation in APIs?',\n    answer: 'Content negotiation allows clients and servers to agree on the best representation of resources. It uses headers like Accept (preferred response format), Accept-Language (preferred language), and Accept-Encoding (compression) to select appropriate content.'\n  },\n  {\n    id: 42,\n    category: 'intermediate',\n    question: 'What is API caching?',\n    answer: 'API caching stores frequently requested data to improve performance and reduce server load. It can occur at multiple levels: browser cache, CDN, reverse proxy, or application cache. Proper cache headers control caching behavior.'\n  },\n  {\n    id: 43,\n    category: 'intermediate',\n    question: 'What are important HTTP caching headers?',\n    answer: 'Key caching headers include: Cache-Control (caching directives), ETag (resource version identifier), Last-Modified (last modification date), Expires (absolute expiration time), and If-None-Match/If-Modified-Since (conditional requests).'\n  },\n  {\n    id: 44,\n    category: 'intermediate',\n    question: 'What is API testing?',\n    answer: 'API testing verifies that APIs meet expectations for functionality, performance, reliability, and security. It includes unit tests, integration tests, contract tests, load tests, and security tests to ensure API quality throughout development.'\n  },\n  {\n    id: 45,\n    category: 'intermediate',\n    question: 'What is the difference between API testing and unit testing?',\n    answer: 'Unit testing tests individual components in isolation, while API testing tests the entire API interface including request/response handling, data validation, business logic, and integration between components. API testing is more comprehensive and end-to-end.'\n  },\n  {\n    id: 46,\n    category: 'intermediate',\n    question: 'What is API monitoring?',\n    answer: 'API monitoring continuously tracks API performance, availability, and usage metrics. It includes uptime monitoring, response time tracking, error rate analysis, and usage analytics to ensure APIs meet service level agreements and user expectations.'\n  },\n  {\n    id: 47,\n    category: 'intermediate',\n    question: 'What is the difference between synchronous and asynchronous APIs?',\n    answer: 'Synchronous APIs wait for the operation to complete before returning a response. Asynchronous APIs return immediately with a status and provide the result later through callbacks, polling, or webhooks. Async is better for long-running operations.'\n  },\n  {\n    id: 48,\n    category: 'intermediate',\n    question: 'What are webhooks?',\n    answer: 'Webhooks are HTTP callbacks that notify external systems when specific events occur. Instead of polling for updates, the server sends POST requests to registered URLs when events happen, enabling real-time notifications and integrations.'\n  },\n  {\n    id: 49,\n    category: 'intermediate',\n    question: 'What is API filtering?',\n    answer: 'API filtering allows clients to retrieve specific subsets of data by applying criteria. Common approaches include query parameters (?status=active), OData-style filters, or custom filtering syntax to reduce data transfer and improve performance.'\n  },\n  {\n    id: 50,\n    category: 'intermediate',\n    question: 'What is API sorting?',\n    answer: 'API sorting allows clients to order results by specified fields. Common implementations use query parameters like ?sort=name,+date (ascending) or ?sort=-created_at (descending). Proper sorting improves user experience and data presentation.'\n  },\n\n  // EXPERT FLASHCARDS (25 cards)\n  {\n    id: 51,\n    category: 'expert',\n    question: 'What is API security and what are common threats?',\n    answer: 'API security protects against threats like injection attacks, broken authentication, excessive data exposure, lack of resources rate limiting, broken function level authorization, mass assignment, security misconfiguration, and insufficient logging/monitoring.'\n  },\n  {\n    id: 52,\n    category: 'expert',\n    question: 'What is the OWASP API Security Top 10?',\n    answer: 'OWASP API Security Top 10 identifies critical API vulnerabilities: broken object level authorization, broken user authentication, excessive data exposure, lack of resources rate limiting, broken function level authorization, mass assignment, security misconfiguration, injection, improper assets management, and insufficient logging/monitoring.'\n  },\n  {\n    id: 53,\n    category: 'expert',\n    question: 'What is API gateway and its benefits?',\n    answer: 'An API gateway is a management layer that sits between clients and backend services. It provides centralized authentication, rate limiting, logging, monitoring, request/response transformation, load balancing, and protocol translation, simplifying client integration and backend management.'\n  },\n  {\n    id: 54,\n    category: 'expert',\n    question: 'What is microservices API design?',\n    answer: 'Microservices API design involves creating small, focused services with well-defined boundaries. Key considerations include service decomposition, inter-service communication, data consistency, distributed transactions, circuit breakers, and service discovery.'\n  },\n  {\n    id: 55,\n    category: 'expert',\n    question: 'What is API-first development?',\n    answer: 'API-first development treats APIs as first-class citizens, designed before implementation. It involves creating API specifications early, enabling parallel development, better testing, improved documentation, and ensuring consistent interfaces across teams and services.'\n  },\n  {\n    id: 56,\n    category: 'expert',\n    question: 'What is HATEOAS (Hypermedia as the Engine of Application State)?',\n    answer: 'HATEOAS is a REST constraint where responses include hypermedia links that guide clients through available actions. It makes APIs self-discoverable and reduces coupling between client and server by dynamically providing navigation options.'\n  },\n  {\n    id: 57,\n    category: 'expert',\n    question: 'What are API design patterns for error handling?',\n    answer: 'Common patterns include: Problem Details (RFC 7807) for structured errors, error envelopes wrapping responses, hierarchical error codes, retry patterns with exponential backoff, circuit breakers for fault tolerance, and bulkhead patterns for isolation.'\n  },\n  {\n    id: 58,\n    category: 'expert',\n    question: 'What is API performance optimization?',\n    answer: 'Performance optimization includes: efficient database queries, caching strategies, data compression, connection pooling, asynchronous processing, CDN usage, response pagination, field selection, and monitoring response times and throughput.'\n  },\n  {\n    id: 59,\n    category: 'expert',\n    question: 'What is API load balancing?',\n    answer: 'Load balancing distributes API requests across multiple servers to improve availability and performance. Strategies include round-robin, least connections, weighted distribution, geographic routing, and health-check based routing with failover mechanisms.'\n  },\n  {\n    id: 60,\n    category: 'expert',\n    question: 'What is API contract testing?',\n    answer: 'Contract testing verifies that API providers and consumers agree on interfaces. Tools like Pact enable consumer-driven contracts, ensuring that changes don\\'t break existing integrations by testing API interactions against agreed specifications.'\n  },\n  {\n    id: 61,\n    category: 'expert',\n    question: 'What is API throttling vs rate limiting?',\n    answer: 'Rate limiting sets request quotas (requests per time period), while throttling controls the rate of request processing. Rate limiting rejects excess requests, while throttling delays them. Both protect against abuse but handle overages differently.'\n  },\n  {\n    id: 62,\n    category: 'expert',\n    question: 'What are API backward compatibility strategies?',\n    answer: 'Strategies include: additive changes only, optional parameters with defaults, deprecation periods with warnings, semantic versioning, parallel version support, adapter patterns, and feature toggles to gradually introduce changes while maintaining existing functionality.'\n  },\n  {\n    id: 63,\n    category: 'expert',\n    question: 'What is API data transformation and why is it needed?',\n    answer: 'API data transformation converts data between different formats, structures, or schemas. It\\'s needed for legacy system integration, data normalization, client-specific requirements, version compatibility, and adapting internal models to external interfaces.'\n  },\n  {\n    id: 64,\n    category: 'expert',\n    question: 'What is distributed API tracing?',\n    answer: 'Distributed tracing tracks requests across multiple services in microservices architectures. It provides end-to-end visibility into request flows, performance bottlenecks, and failure points using correlation IDs and span tracking across service boundaries.'\n  },\n  {\n    id: 65,\n    category: 'expert',\n    question: 'What are API circuit breaker patterns?',\n    answer: 'Circuit breakers prevent cascading failures by monitoring service health and temporarily blocking requests to failing services. States include closed (normal), open (blocking requests), and half-open (testing recovery), with configurable thresholds and timeouts.'\n  },\n  {\n    id: 66,\n    category: 'expert',\n    question: 'What is API schema evolution?',\n    answer: 'Schema evolution manages changes to API data structures over time while maintaining compatibility. Strategies include additive changes, optional fields, deprecation markers, schema registries, and evolution rules that ensure clients can handle schema updates gracefully.'\n  },\n  {\n    id: 67,\n    category: 'expert',\n    question: 'What is API federation?',\n    answer: 'API federation combines multiple APIs into a unified interface, allowing clients to access distributed services through a single endpoint. It involves schema stitching, request routing, response merging, and maintaining consistent authentication and authorization.'\n  },\n  {\n    id: 68,\n    category: 'expert',\n    question: 'What are API streaming patterns?',\n    answer: 'Streaming patterns handle continuous data flows: Server-Sent Events for one-way streaming, WebSockets for bidirectional communication, and streaming APIs for large datasets. They\\'re used for real-time updates, live data feeds, and progressive data loading.'\n  },\n  {\n    id: 69,\n    category: 'expert',\n    question: 'What is API observability?',\n    answer: 'API observability provides deep insights into API behavior through metrics (performance, usage), logs (detailed events), and traces (request flows). It enables proactive monitoring, debugging, performance optimization, and understanding user behavior patterns.'\n  },\n  {\n    id: 70,\n    category: 'expert',\n    question: 'What is API governance?',\n    answer: 'API governance establishes policies, standards, and processes for API design, development, and management. It includes design guidelines, security policies, lifecycle management, documentation standards, and review processes to ensure consistency and quality.'\n  },\n  {\n    id: 71,\n    category: 'expert',\n    question: 'What are API deployment strategies?',\n    answer: 'Deployment strategies include: blue-green deployment for zero-downtime updates, canary releases for gradual rollouts, rolling deployments for incremental updates, and feature flags for controlled feature activation, each managing risk and user impact differently.'\n  },\n  {\n    id: 72,\n    category: 'expert',\n    question: 'What is API mocking and its benefits?',\n    answer: 'API mocking creates fake implementations for testing and development. Benefits include parallel development, early testing, third-party service simulation, performance testing, edge case testing, and reducing dependencies during development cycles.'\n  },\n  {\n    id: 73,\n    category: 'expert',\n    question: 'What is API analytics and key metrics?',\n    answer: 'API analytics tracks usage patterns and performance metrics including: request volume, response times, error rates, most used endpoints, user behavior, geographic distribution, authentication success rates, and business-specific metrics for optimization.'\n  },\n  {\n    id: 74,\n    category: 'expert',\n    question: 'What are API monetization strategies?',\n    answer: 'Monetization strategies include: tiered pricing based on usage, freemium models with premium features, pay-per-call pricing, subscription models, partner revenue sharing, and value-based pricing aligned with business outcomes and API value proposition.'\n  },\n  {\n    id: 75,\n    category: 'expert',\n    question: 'What is API lifecycle management?',\n    answer: 'API lifecycle management covers the entire API journey: planning and design, development and testing, deployment and publication, monitoring and optimization, versioning and evolution, deprecation and retirement, with governance and documentation throughout.'\n  }\n];\n\nexport const quizQuestions: QuizQuestion[] = [\n  // BASICS QUIZ QUESTIONS (23 questions)\n  {\n    id: 1,\n    category: 'basics',\n    question: 'What does REST stand for?',\n    options: [\n      'Reliable State Transfer',\n      'Representational State Transfer',\n      'Remote State Transmission',\n      'Rapid Exchange Standard Technology'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 2,\n    category: 'basics',\n    question: 'Which HTTP method is typically used to retrieve data?',\n    options: ['POST', 'GET', 'PUT', 'DELETE'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 3,\n    category: 'basics',\n    question: 'What HTTP status code indicates successful creation of a resource?',\n    options: ['200 OK', '201 Created', '202 Accepted', '204 No Content'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 4,\n    category: 'basics',\n    question: 'Which HTTP method is used to delete a resource?',\n    options: ['REMOVE', 'DELETE', 'DESTROY', 'DROP'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 5,\n    category: 'basics',\n    question: 'What does HTTP status code 404 indicate?',\n    options: ['Server error', 'Unauthorized access', 'Resource not found', 'Bad request'],\n    correctAnswer: 2,\n    \n  },\n  {\n    id: 6,\n    category: 'basics',\n    question: 'Which data format is most commonly used in modern REST APIs?',\n    options: ['XML', 'CSV', 'JSON', 'HTML'],\n    correctAnswer: 2,\n    \n  },\n  {\n    id: 7,\n    category: 'basics',\n    question: 'What is the difference between PUT and PATCH?',\n    options: [\n      'PUT is for creation, PATCH is for updates',\n      'PUT replaces entire resource, PATCH applies partial updates',\n      'They are identical',\n      'PUT is deprecated, use PATCH instead'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 8,\n    category: 'basics',\n    question: 'What does \"stateless\" mean in REST architecture?',\n    options: [\n      'The server doesn\\'t store any data',\n      'Each request contains all necessary information',\n      'The API has no states',\n      'The client cannot maintain state'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 9,\n    category: 'basics',\n    question: 'What HTTP status code indicates unauthorized access?',\n    options: ['400 Bad Request', '401 Unauthorized', '403 Forbidden', '404 Not Found'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 10,\n    category: 'basics',\n    question: 'What is a path parameter in a URL?',\n    options: [\n      'A query string parameter',\n      'A variable part of the URL path that identifies a resource',\n      'A header parameter',\n      'A body parameter'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 11,\n    category: 'basics',\n    question: 'Which HTTP method is idempotent?',\n    options: ['POST', 'GET', 'Both POST and GET', 'Neither POST nor GET'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 12,\n    category: 'basics',\n    question: 'What does the Content-Type header specify?',\n    options: [\n      'The size of the content',\n      'The media type of the request or response body',\n      'The content encoding',\n      'The content language'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 13,\n    category: 'basics',\n    question: 'What HTTP status code indicates a server error?',\n    options: ['400 Bad Request', '404 Not Found', '500 Internal Server Error', '401 Unauthorized'],\n    correctAnswer: 2,\n    \n  },\n  {\n    id: 14,\n    category: 'basics',\n    question: 'Query parameters in a URL are separated by which character?',\n    options: ['/', '&', '?', '#'],\n    correctAnswer: 1,\n  },\n  {\n    id: 15,\n    category: 'basics',\n    question: 'What does HTTP status code 403 mean?',\n    options: [\n      'Resource not found',\n      'Server error',\n      'Forbidden - server refuses to authorize the request',\n      'Bad request syntax'\n    ],\n    correctAnswer: 2,\n    \n  },\n  {\n    id: 16,\n    category: 'basics',\n    question: 'Which HTTP method is typically used to create new resources?',\n    options: ['GET', 'POST', 'PUT', 'DELETE'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 17,\n    category: 'basics',\n    question: 'What is an API endpoint?',\n    options: [\n      'The final destination of data',\n      'A specific URL where an API can be accessed',\n      'The end of an API lifecycle',\n      'A termination point for connections'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 18,\n    category: 'basics',\n    question: 'What does HTTP status code 204 indicate?',\n    options: ['Created', 'No Content', 'Not Modified', 'Accepted'],\n    correctAnswer: 1,\n  },\n  {\n    id: 19,\n    category: 'basics',\n    question: 'In REST, what does a resource represent?',\n    options: [\n      'A server capability',\n      'Any information that can be named and addressed via URI',\n      'A database table',\n      'A programming function'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 20,\n    category: 'basics',\n    question: 'What is the purpose of the Accept header?',\n    options: [\n      'To accept terms of service',\n      'To specify what media types the client can process',\n      'To accept cookies',\n      'To confirm request acceptance'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 21,\n    category: 'basics',\n    question: 'Which status codes are in the 2xx range?',\n    options: ['Client errors', 'Server errors', 'Success responses', 'Redirection messages'],\n    correctAnswer: 2,\n    \n  },\n  {\n    id: 22,\n    category: 'basics',\n    question: 'What does HTTP status code 400 indicate?',\n    options: ['Success', 'Bad Request - client error', 'Server error', 'Not found'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 23,\n    category: 'basics',\n    question: 'Which HTTP method should be used to update an entire resource?',\n    options: ['POST', 'PATCH', 'PUT', 'UPDATE'],\n    correctAnswer: 2,\n    \n  },\n\n  // INTERMEDIATE QUIZ QUESTIONS (24 questions)\n  {\n    id: 24,\n    category: 'intermediate',\n    question: 'What is an API key used for?',\n    options: [\n      'Encrypting API data',\n      'Authenticating API requests',\n      'Compressing API responses',\n      'Versioning API endpoints'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 25,\n    category: 'intermediate',\n    question: 'What is OAuth 2.0 primarily used for?',\n    options: [\n      'Data encryption',\n      'Authorization framework for secure delegated access',\n      'API versioning',\n      'Data compression'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 26,\n    category: 'intermediate',\n    question: 'Which versioning strategy uses URL paths?',\n    options: [\n      'Header versioning',\n      'Query parameter versioning',\n      'URI versioning like /v1/users',\n      'Content negotiation versioning'\n    ],\n    correctAnswer: 2,\n  },\n  {\n    id: 27,\n    category: 'intermediate',\n    question: 'What is pagination used for in APIs?',\n    options: [\n      'Securing API endpoints',\n      'Dividing large datasets into manageable chunks',\n      'Versioning API responses',\n      'Compressing API data'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 28,\n    category: 'intermediate',\n    question: 'What does CORS stand for?',\n    options: [\n      'Cross-Origin Request Security',\n      'Cross-Origin Resource Sharing',\n      'Common Origin Resource Standard',\n      'Centralized Origin Request Service'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 29,\n    category: 'intermediate',\n    question: 'What is rate limiting?',\n    options: [\n      'Limiting the size of API responses',\n      'Controlling the number of requests per time period',\n      'Limiting the number of API endpoints',\n      'Controlling data transmission rates'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 30,\n    category: 'intermediate',\n    question: 'What is a JWT token?',\n    options: [\n      'JavaScript Template Token',\n      'JSON Web Token - a compact, URL-safe token format',\n      'Java Transaction Token',\n      'Joint Web Technology token'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 31,\n    category: 'intermediate',\n    question: 'What information should a good API error response include?',\n    options: [\n      'Only the HTTP status code',\n      'Status code, error message, and description',\n      'Just an error message',\n      'Only internal error codes'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 32,\n    category: 'intermediate',\n    question: 'What is the purpose of API documentation?',\n    options: [\n      'Legal compliance only',\n      'Providing comprehensive information about endpoints, parameters, and usage',\n      'Marketing the API',\n      'Internal team communication only'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 33,\n    category: 'intermediate',\n    question: 'What is OpenAPI (Swagger) specification?',\n    options: [\n      'A programming language for APIs',\n      'A standard for describing REST APIs in machine-readable format',\n      'An API testing tool',\n      'A database for API documentation'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 34,\n    category: 'intermediate',\n    question: 'When do browsers send CORS preflight requests?',\n    options: [\n      'For all cross-origin requests',\n      'For simple GET and POST requests only',\n      'For non-simple requests with custom headers or certain methods',\n      'Never, they are optional'\n    ],\n    correctAnswer: 2,\n  },\n  {\n    id: 35,\n    category: 'intermediate',\n    question: 'What is content negotiation in APIs?',\n    options: [\n      'Negotiating API contracts',\n      'Allowing clients and servers to agree on response format using headers',\n      'Pricing negotiations for API usage',\n      'Security negotiations'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 36,\n    category: 'intermediate',\n    question: 'What is API caching?',\n    options: [\n      'Storing API keys securely',\n      'Storing frequently requested data to improve performance',\n      'Caching API documentation',\n      'Storing user credentials'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 37,\n    category: 'intermediate',\n    question: 'Which header helps with conditional requests for caching?',\n    options: ['Cache-Control', 'ETag', 'Content-Type', 'Authorization'],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 38,\n    category: 'intermediate',\n    question: 'What is the difference between synchronous and asynchronous APIs?',\n    options: [\n      'Sync uses GET, async uses POST',\n      'Sync waits for completion, async returns immediately',\n      'There is no difference',\n      'Sync is faster than async'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 39,\n    category: 'intermediate',\n    question: 'What are webhooks?',\n    options: [\n      'API security mechanisms',\n      'HTTP callbacks that notify external systems of events',\n      'API testing tools',\n      'Database hooks for APIs'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 40,\n    category: 'intermediate',\n    question: 'What is API filtering?',\n    options: [\n      'Security filtering of malicious requests',\n      'Allowing clients to retrieve specific subsets of data using criteria',\n      'Filtering out deprecated API endpoints',\n      'Network traffic filtering'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 41,\n    category: 'intermediate',\n    question: 'Common rate limiting headers include:',\n    options: [\n      'X-Rate-Limit only',\n      'X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset',\n      'Rate-Control only',\n      'Limit-Status only'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 42,\n    category: 'intermediate',\n    question: 'What is API monitoring used for?',\n    options: [\n      'Watching API development progress',\n      'Continuously tracking API performance, availability, and usage',\n      'Monitoring API documentation updates',\n      'Surveillance of API users'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 43,\n    category: 'intermediate',\n    question: 'What is the purpose of API testing?',\n    options: [\n      'Testing API documentation',\n      'Verifying API functionality, performance, and reliability',\n      'Testing API marketing materials',\n      'Testing API pricing models'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 44,\n    category: 'intermediate',\n    question: 'What is cursor-based pagination?',\n    options: [\n      'Using page numbers',\n      'Using database cursors to navigate through result sets',\n      'Using timestamps only',\n      'Using random access patterns'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 45,\n    category: 'intermediate',\n    question: 'What does API versioning help achieve?',\n    options: [\n      'Faster API responses',\n      'Backward compatibility while introducing new features',\n      'Better security',\n      'Reduced server costs'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 46,\n    category: 'intermediate',\n    question: 'What is basic authentication in APIs?',\n    options: [\n      'No authentication required',\n      'Username and password encoded in Base64 in Authorization header',\n      'API key authentication',\n      'OAuth authentication'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 47,\n    category: 'intermediate',\n    question: 'What is the Cache-Control header used for?',\n    options: [\n      'Controlling API access',\n      'Providing caching directives for responses',\n      'Controlling content format',\n      'Managing API versions'\n    ],\n    correctAnswer: 1,\n    \n  },\n\n  // EXPERT QUIZ QUESTIONS (23 questions)\n  {\n    id: 48,\n    category: 'expert',\n    question: 'What is the OWASP API Security Top 10?',\n    options: [\n      'A list of popular API frameworks',\n      'A list of critical API security vulnerabilities',\n      'API performance benchmarks',\n      'API design guidelines'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 49,\n    category: 'expert',\n    question: 'What is an API gateway?',\n    options: [\n      'A database for APIs',\n      'A management layer between clients and backend services',\n      'An API testing tool',\n      'A programming framework'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 50,\n    category: 'expert',\n    question: 'What is HATEOAS?',\n    options: [\n      'HTTP Advanced Transfer Protocol',\n      'Hypermedia as the Engine of Application State',\n      'High Availability API Service',\n      'HTTP Authentication Token System'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 51,\n    category: 'expert',\n    question: 'What is API-first development?',\n    options: [\n      'Developing APIs before frontend',\n      'Treating APIs as first-class citizens, designed before implementation',\n      'Using APIs only for development',\n      'Prioritizing API performance over features'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 52,\n    category: 'expert',\n    question: 'What is a circuit breaker pattern in APIs?',\n    options: [\n      'A security mechanism',\n      'A pattern that prevents cascading failures by temporarily blocking requests to failing services',\n      'An authentication pattern',\n      'A data validation pattern'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 53,\n    category: 'expert',\n    question: 'What is API contract testing?',\n    options: [\n      'Testing API legal contracts',\n      'Verifying that API providers and consumers agree on interfaces',\n      'Testing API pricing contracts',\n      'Testing service level agreements'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 54,\n    category: 'expert',\n    question: 'What is distributed API tracing?',\n    options: [\n      'Tracing API usage across different regions',\n      'Tracking requests across multiple services in microservices architecture',\n      'Tracing API development history',\n      'Geographic tracking of API calls'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 55,\n    category: 'expert',\n    question: 'What is the difference between API throttling and rate limiting?',\n    options: [\n      'They are the same thing',\n      'Rate limiting sets quotas, throttling controls processing rate',\n      'Throttling is faster than rate limiting',\n      'Rate limiting is deprecated'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 56,\n    category: 'expert',\n    question: 'What is API schema evolution?',\n    options: [\n      'Changing API programming languages',\n      'Managing changes to API data structures while maintaining compatibility',\n      'Evolving API documentation',\n      'Upgrading API servers'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 57,\n    category: 'expert',\n    question: 'What is API federation?',\n    options: [\n      'Government regulation of APIs',\n      'Combining multiple APIs into a unified interface',\n      'API security standards',\n      'International API agreements'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 58,\n    category: 'expert',\n    question: 'What is API observability?',\n    options: [\n      'Making APIs visible to users',\n      'Deep insights into API behavior through metrics, logs, and traces',\n      'API user interface design',\n      'API documentation quality'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 59,\n    category: 'expert',\n    question: 'What are backward compatibility strategies for APIs?',\n    options: [\n      'Always breaking changes',\n      'Additive changes, optional parameters, deprecation periods',\n      'Removing old features immediately',\n      'Ignoring compatibility concerns'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 60,\n    category: 'expert',\n    question: 'What is API governance?',\n    options: [\n      'Government oversight of APIs',\n      'Policies, standards, and processes for API management',\n      'API user permissions',\n      'API legal compliance only'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 61,\n    category: 'expert',\n    question: 'What is blue-green deployment for APIs?',\n    options: [\n      'Using blue and green colors in API documentation',\n      'A deployment strategy for zero-downtime updates',\n      'Environmental deployment separation',\n      'A security color-coding system'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 62,\n    category: 'expert',\n    question: 'What is API mocking?',\n    options: [\n      'Testing API performance',\n      'Creating fake implementations for testing and development',\n      'Criticizing API design',\n      'Copying API functionality'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 63,\n    category: 'expert',\n    question: 'What is canary release in API deployment?',\n    options: [\n      'Releasing APIs to birds first',\n      'Gradual rollout to a small subset of users to test changes',\n      'Yellow-themed API design',\n      'Mining industry API standards'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 64,\n    category: 'expert',\n    question: 'What is API lifecycle management?',\n    options: [\n      'Managing API server lifespan',\n      'Managing the entire journey from API design to retirement',\n      'Biological lifecycle of API organisms',\n      'Managing API developer careers'\n    ],\n    correctAnswer: 1,\n  },\n  {\n    id: 65,\n    category: 'expert',\n    question: 'What are API streaming patterns used for?',\n    options: [\n      'Video streaming only',\n      'Handling continuous data flows and real-time updates',\n      'Audio streaming APIs',\n      'Live broadcasting APIs'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 66,\n    category: 'expert',\n    question: 'What is API analytics used for?',\n    options: [\n      'Financial analysis of API costs',\n      'Tracking usage patterns, performance metrics, and business insights',\n      'Analyzing API source code',\n      'Academic research on APIs'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 67,\n    category: 'expert',\n    question: 'What is a bulkhead pattern in API architecture?',\n    options: [\n      'Building physical barriers around servers',\n      'Isolating critical resources to prevent cascade failures',\n      'Creating large API endpoints',\n      'Maritime API security standards'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 68,\n    category: 'expert',\n    question: 'What is API data transformation used for?',\n    options: [\n      'Encrypting API data',\n      'Converting data between different formats, structures, or schemas',\n      'Compressing API responses',\n      'Backing up API data'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 69,\n    category: 'expert',\n    question: 'What is consumer-driven contract testing?',\n    options: [\n      'Testing driven by end users',\n      'Consumers define contracts that producers must satisfy',\n      'Testing API consumption patterns',\n      'Market research for API features'\n    ],\n    correctAnswer: 1,\n    \n  },\n  {\n    id: 70,\n    category: 'expert',\n    question: 'What are API monetization strategies?',\n    options: [\n      'Making money from API development',\n      'Business models for generating revenue from API usage',\n      'Cryptocurrency integration in APIs',\n      'Financial APIs only'\n    ],\n    correctAnswer: 1,\n    \n  }\n];"],"names":["categoryData","flashcards","quizQuestions"],"mappings":"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"}