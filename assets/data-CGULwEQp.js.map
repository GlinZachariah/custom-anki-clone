{"version":3,"file":"data-CGULwEQp.js","sources":["../../src/topics/java8/data.ts"],"sourcesContent":["import { Flashcard, QuizQuestion, Category, CategoryData } from '../../types';\n\nexport const categoryData: Record<Category, CategoryData> = {\n  basics: {\n    name: 'Java 8 Basics',\n    color: '#4CAF50',\n    description: 'Lambda expressions, functional interfaces, method references, and basic stream operations'\n  },\n  intermediate: {\n    name: 'Java 8 Intermediate',\n    color: '#FF9800',\n    description: 'Stream API, collectors, Optional class, and advanced functional programming'\n  },\n  expert: {\n    name: 'Java 8 Expert',\n    color: '#F44336',\n    description: 'Advanced streams, CompletableFuture, parallel processing, and Date/Time API'\n  }\n};\n\nexport const flashcards: Flashcard[] = [\n  // BASICS - Java 8 Fundamentals (25 cards)\n  {\n    id: 1,\n    question: \"What is a lambda expression in Java 8?\",\n    answer: \"A lambda expression is a concise way to represent an anonymous function that can be passed around. It has the syntax: (parameters) -> expression or (parameters) -> { statements }. Example: (x, y) -> x + y. It enables functional programming style and works with functional interfaces.\",\n    category: 'basics'\n  },\n  {\n    id: 2,\n    question: \"What is a functional interface in Java 8?\",\n    answer: \"A functional interface is an interface with exactly one abstract method (SAM - Single Abstract Method). It can have default and static methods. Examples: Predicate<T>, Function<T,R>, Consumer<T>, Supplier<T>. The @FunctionalInterface annotation ensures the interface has only one abstract method.\",\n    category: 'basics'\n  },\n  {\n    id: 3,\n    question: \"What are the built-in functional interfaces in Java 8?\",\n    answer: \"Key functional interfaces include: Predicate<T> (T -> boolean for testing conditions), Function<T,R> (T -> R for transformations), Consumer<T> (T -> void for side effects), Supplier<T> (() -> T for providing values), UnaryOperator<T> (T -> T), BinaryOperator<T> ((T,T) -> T).\",\n    category: 'basics'\n  },\n  {\n    id: 4,\n    question: \"What are method references in Java 8?\",\n    answer: \"Method references provide a shorthand for lambda expressions that call existing methods. Types: Static method (Class::method), Instance method of specific object (object::method), Instance method of arbitrary object (Class::method), Constructor (Class::new). Example: String::toUpperCase instead of s -> s.toUpperCase().\",\n    category: 'basics'\n  },\n  {\n    id: 5,\n    question: \"What is the Stream API in Java 8?\",\n    answer: \"Stream API provides functional programming approach for processing collections. Streams are not data structures but views of data. They support intermediate operations (filter, map, sorted) and terminal operations (forEach, collect, reduce). Enables concise, readable data processing pipelines.\",\n    category: 'basics'\n  },\n  {\n    id: 6,\n    question: \"What is the difference between intermediate and terminal operations in streams?\",\n    answer: \"Intermediate operations return a new stream and are lazy (not executed until terminal operation). Examples: filter(), map(), sorted(). Terminal operations trigger stream processing and return non-stream result. Examples: forEach(), collect(), reduce(), count(). Streams use lazy evaluation for performance.\",\n    category: 'basics'\n  },\n  {\n    id: 7,\n    question: \"How do you create streams in Java 8?\",\n    answer: \"Streams can be created from: Collections (collection.stream()), Arrays (Arrays.stream(array)), Static methods (Stream.of(1,2,3)), Ranges (IntStream.range(1,10)), Files (Files.lines()), Infinite streams (Stream.iterate(), Stream.generate()).\",\n    category: 'basics'\n  },\n  {\n    id: 8,\n    question: \"What is the filter() operation in streams?\",\n    answer: \"filter() is an intermediate operation that selects elements matching a given predicate. It takes a Predicate<T> and returns a new stream containing only elements for which the predicate returns true. Example: stream.filter(x -> x > 5) keeps only elements greater than 5.\",\n    category: 'basics'\n  },\n  {\n    id: 9,\n    question: \"What is the map() operation in streams?\",\n    answer: \"map() is an intermediate operation that transforms elements using a given function. It takes a Function<T,R> and returns a stream of transformed elements. Example: stream.map(String::toUpperCase) converts all strings to uppercase. It's one-to-one transformation.\",\n    category: 'basics'\n  },\n  {\n    id: 10,\n    question: \"What is the forEach() operation in streams?\",\n    answer: \"forEach() is a terminal operation that performs an action for each element in the stream. It takes a Consumer<T> and returns void. Example: stream.forEach(System.out::println) prints each element. It's used for side effects, not for transformations.\",\n    category: 'basics'\n  },\n  {\n    id: 11,\n    question: \"What is the collect() operation in streams?\",\n    answer: \"collect() is a terminal operation that accumulates stream elements into a collection or other data structure. It uses Collector objects. Common collectors: toList(), toSet(), toMap(), joining(), groupingBy(). Example: stream.collect(Collectors.toList()) creates a list.\",\n    category: 'basics'\n  },\n  {\n    id: 12,\n    question: \"What are default methods in Java 8 interfaces?\",\n    answer: \"Default methods allow interfaces to have method implementations using the 'default' keyword. They enable interface evolution without breaking existing implementations. Example: default void method() { /* implementation */ }. Classes can override default methods or inherit them.\",\n    category: 'basics'\n  },\n  {\n    id: 13,\n    question: \"What are static methods in interfaces (Java 8)?\",\n    answer: \"Java 8 allows static methods in interfaces using the 'static' keyword. These methods belong to the interface, not implementing classes. They're called on the interface itself: Interface.staticMethod(). Useful for utility methods related to the interface.\",\n    category: 'basics'\n  },\n  {\n    id: 14,\n    question: \"What is the Optional class in Java 8?\",\n    answer: \"Optional<T> is a container that may or may not contain a non-null value. It helps avoid NullPointerException by making null handling explicit. Key methods: of(), empty(), ofNullable(), isPresent(), ifPresent(), orElse(), orElseThrow(). Encourages better null-checking practices.\",\n    category: 'basics'\n  },\n  {\n    id: 15,\n    question: \"How do you create Optional objects?\",\n    answer: \"Optional objects are created using: Optional.of(value) - for non-null values (throws NPE if null), Optional.empty() - for empty optional, Optional.ofNullable(value) - handles null safely (returns empty if null). Never use new Optional() directly.\",\n    category: 'basics'\n  },\n  {\n    id: 16,\n    question: \"What is the reduce() operation in streams?\",\n    answer: \"reduce() is a terminal operation that combines stream elements into a single result using a binary operator. Forms: reduce(BinaryOperator), reduce(identity, BinaryOperator), reduce(identity, BiFunction, BinaryOperator). Example: stream.reduce(0, Integer::sum) sums all elements.\",\n    category: 'basics'\n  },\n  {\n    id: 17,\n    question: \"What are specialized streams for primitives?\",\n    answer: \"Java 8 provides IntStream, LongStream, and DoubleStream for primitive types to avoid boxing overhead. They offer specialized methods like sum(), average(), max(), min(). Convert using mapToInt(), mapToLong(), mapToDouble(). Example: stream.mapToInt(String::length).sum().\",\n    category: 'basics'\n  },\n  {\n    id: 18,\n    question: \"What is the difference between findFirst() and findAny()?\",\n    answer: \"Both return Optional<T> but with different guarantees. findFirst() returns the first element in encounter order, deterministic. findAny() returns any element, non-deterministic, optimized for parallel streams. In sequential streams, findAny() usually returns first element.\",\n    category: 'basics'\n  },\n  {\n    id: 19,\n    question: \"What are the matching operations in streams?\",\n    answer: \"Matching operations test stream elements against predicates: allMatch() returns true if all elements match, anyMatch() returns true if any element matches, noneMatch() returns true if no elements match. All are terminal operations returning boolean.\",\n    category: 'basics'\n  },\n  {\n    id: 20,\n    question: \"What is the count() operation in streams?\",\n    answer: \"count() is a terminal operation that returns the number of elements in the stream as a long. It's equivalent to reduce(0, (a, b) -> a + 1) but more efficient. Example: stream.filter(predicate).count() counts elements matching the predicate.\",\n    category: 'basics'\n  },\n  {\n    id: 21,\n    question: \"What is the limit() operation in streams?\",\n    answer: \"limit() is an intermediate operation that truncates the stream to contain at most the specified number of elements. It's useful for pagination or processing partial data. Example: stream.limit(10) keeps only first 10 elements. Short-circuits for infinite streams.\",\n    category: 'basics'\n  },\n  {\n    id: 22,\n    question: \"What is the skip() operation in streams?\",\n    answer: \"skip() is an intermediate operation that discards the first n elements of the stream and returns remaining elements. If stream has fewer elements than n, empty stream is returned. Example: stream.skip(5) skips first 5 elements. Useful for pagination.\",\n    category: 'basics'\n  },\n  {\n    id: 23,\n    question: \"What is the distinct() operation in streams?\",\n    answer: \"distinct() is an intermediate operation that removes duplicate elements from the stream based on equals() method. It returns a stream with unique elements. Example: stream.distinct() removes duplicates. For custom objects, ensure proper equals() and hashCode() implementation.\",\n    category: 'basics'\n  },\n  {\n    id: 24,\n    question: \"What is the sorted() operation in streams?\",\n    answer: \"sorted() is an intermediate operation that sorts stream elements. Two forms: sorted() uses natural ordering (Comparable), sorted(Comparator) uses custom comparator. Example: stream.sorted(Comparator.comparing(Person::getName)) sorts by name. Returns a new sorted stream.\",\n    category: 'basics'\n  },\n  {\n    id: 25,\n    question: \"How do lambda expressions improve code readability?\",\n    answer: \"Lambda expressions reduce boilerplate code, make intent clearer, and enable functional programming style. Compare: list.forEach(item -> System.out.println(item)) vs traditional for-each loops. They make code more concise, expressive, and enable method chaining for fluent APIs.\",\n    category: 'basics'\n  },\n\n  // INTERMEDIATE - Advanced Stream Operations & Functional Programming (25 cards)\n  {\n    id: 26,\n    question: \"What is the flatMap() operation in streams?\",\n    answer: \"flatMap() is an intermediate operation that flattens nested structures. It takes a Function that returns a Stream and flattens the result into a single stream. Example: stream.flatMap(Collection::stream) flattens a stream of collections. It's one-to-many transformation followed by flattening.\",\n    category: 'intermediate'\n  },\n  {\n    id: 27,\n    question: \"What are Collectors in Java 8?\",\n    answer: \"Collectors are utility implementations of the Collector interface used with collect() operation. Common ones: toList(), toSet(), toMap(), groupingBy(), partitioningBy(), joining(), counting(), summarizingInt(). They provide predefined ways to accumulate stream elements into various data structures.\",\n    category: 'intermediate'\n  },\n  {\n    id: 28,\n    question: \"How does groupingBy() collector work?\",\n    answer: \"groupingBy() groups stream elements by a classifier function into a Map. Forms: groupingBy(classifier), groupingBy(classifier, downstream), groupingBy(classifier, mapFactory, downstream). Example: stream.collect(groupingBy(Person::getAge)) groups people by age into Map<Integer, List<Person>>.\",\n    category: 'intermediate'\n  },\n  {\n    id: 29,\n    question: \"What is partitioningBy() collector?\",\n    answer: \"partitioningBy() is a specialized groupingBy that partitions elements based on a Predicate into a Map<Boolean, List<T>>. True key contains matching elements, false key contains non-matching. Example: stream.collect(partitioningBy(n -> n > 10)) separates numbers greater than 10.\",\n    category: 'intermediate'\n  },\n  {\n    id: 30,\n    question: \"How do you perform multiple operations with collectors?\",\n    answer: \"Use downstream collectors with groupingBy/partitioningBy for complex operations. Examples: groupingBy(Person::getCity, counting()) counts people per city, groupingBy(Person::getDept, mapping(Person::getName, toList())) collects names by department. Chain collectors for sophisticated data processing.\",\n    category: 'intermediate'\n  },\n  {\n    id: 31,\n    question: \"What is the teeing collector in Java 8+?\",\n    answer: \"teeing() collector (Java 12+) allows performing two different collector operations on the same stream and combining results with a BiFunction. Example: stream.collect(teeing(counting(), summingInt(Item::getPrice), (count, sum) -> new Summary(count, sum))) combines count and sum operations.\",\n    category: 'intermediate'\n  },\n  {\n    id: 32,\n    question: \"How do you create custom collectors?\",\n    answer: \"Create custom collectors using Collector.of() with supplier (creates container), accumulator (adds elements), combiner (merges containers), finisher (transforms result). Example: Collector.of(ArrayList::new, List::add, (l1, l2) -> { l1.addAll(l2); return l1; }, Function.identity()).\",\n    category: 'intermediate'\n  },\n  {\n    id: 33,\n    question: \"What are the three forms of reduce() operation?\",\n    answer: \"1) reduce(BinaryOperator) - returns Optional<T>, 2) reduce(identity, BinaryOperator) - returns T with identity as default, 3) reduce(identity, BiFunction, BinaryOperator) - for mapping and reducing in one step, useful in parallel streams for different types.\",\n    category: 'intermediate'\n  },\n  {\n    id: 34,\n    question: \"How do you handle Optional values effectively?\",\n    answer: \"Use Optional methods: isPresent()/isEmpty() for checking, ifPresent(Consumer) for conditional actions, orElse(default) for defaults, orElseGet(Supplier) for lazy defaults, orElseThrow() for exceptions, map() for transformations, filter() for conditional processing. Avoid get() without checking.\",\n    category: 'intermediate'\n  },\n  {\n    id: 35,\n    question: \"What is the difference between orElse() and orElseGet()?\",\n    answer: \"orElse(value) always evaluates the default value even if Optional has a value. orElseGet(Supplier) only evaluates the supplier if Optional is empty. Use orElseGet() when default value creation is expensive or has side effects. orElse() for simple constant values.\",\n    category: 'intermediate'\n  },\n  {\n    id: 36,\n    question: \"How do you chain Optional operations?\",\n    answer: \"Chain Optional operations using map(), flatMap(), filter(): optional.map(String::toUpperCase).filter(s -> s.length() > 5).orElse(\\\"\\\"). Use flatMap() when mapping function returns Optional. This creates fluent, null-safe processing pipelines without explicit null checks.\",\n    category: 'intermediate'\n  },\n  {\n    id: 37,\n    question: \"What are the performance considerations for streams?\",\n    answer: \"Streams have overhead for simple operations but excel for complex processing. Consider: short-circuiting operations (limit, findFirst), lazy evaluation benefits, boxing costs with primitive streams, parallel stream overhead. Use appropriate stream type (Stream vs IntStream) and benchmark for performance-critical code.\",\n    category: 'intermediate'\n  },\n  {\n    id: 38,\n    question: \"How do you convert between different collection types using streams?\",\n    answer: \"Use collect() with appropriate collectors: stream.collect(toList()), collect(toSet()), collect(toCollection(TreeSet::new)), collect(toMap(keyMapper, valueMapper)). For arrays: stream.toArray() or stream.toArray(String[]::new). Streams provide flexible collection conversion.\",\n    category: 'intermediate'\n  },\n  {\n    id: 39,\n    question: \"What is the joining() collector and how is it used?\",\n    answer: \"joining() collector concatenates stream elements into a String. Forms: joining() (no delimiter), joining(delimiter), joining(delimiter, prefix, suffix). Example: stream.collect(joining(\\\", \\\", \\\"[\\\", \\\"]\\\")) creates \\\"[a, b, c]\\\". Works with toString() of elements.\",\n    category: 'intermediate'\n  },\n  {\n    id: 40,\n    question: \"How do you work with statistical collectors?\",\n    answer: \"Statistical collectors provide summary statistics: summingInt(), averagingInt(), summarizingInt() return IntSummaryStatistics with count, sum, min, max, average. Example: stream.collect(summarizingInt(Person::getAge)) provides comprehensive age statistics. Available for int, long, double types.\",\n    category: 'intermediate'\n  },\n  {\n    id: 41,\n    question: \"What is the collectingAndThen() collector?\",\n    answer: \"collectingAndThen() applies a finishing transformation to collector result. Takes a collector and finisher function. Example: stream.collect(collectingAndThen(toList(), Collections::unmodifiableList)) creates immutable list. Useful for post-processing collected results.\",\n    category: 'intermediate'\n  },\n  {\n    id: 42,\n    question: \"How do you perform multi-level grouping?\",\n    answer: \"Use nested groupingBy collectors: stream.collect(groupingBy(Person::getDept, groupingBy(Person::getLevel))) creates Map<Dept, Map<Level, List<Person>>>. Can chain multiple levels and combine with other downstream collectors for complex hierarchical data structures.\",\n    category: 'intermediate'\n  },\n  {\n    id: 43,\n    question: \"What are the min() and max() operations in streams?\",\n    answer: \"min() and max() are terminal operations that return Optional<T> with minimum/maximum element using provided Comparator. Return Optional.empty() for empty streams. Example: stream.min(Comparator.comparing(Person::getAge)) finds youngest person. Use natural ordering with min()/max() on Comparable types.\",\n    category: 'intermediate'\n  },\n  {\n    id: 44,\n    question: \"How do you handle exceptions in stream operations?\",\n    answer: \"Streams don't handle checked exceptions well. Strategies: 1) Wrap in unchecked exceptions, 2) Use Optional to represent failures, 3) Create utility methods that handle exceptions, 4) Use try-catch within lambda and return default values. Consider using libraries like Vavr for better exception handling.\",\n    category: 'intermediate'\n  },\n  {\n    id: 45,\n    question: \"What is the peek() operation and when should you use it?\",\n    answer: \"peek() is an intermediate operation for debugging and side effects without affecting stream elements. Takes Consumer<T> and returns same stream. Example: stream.peek(System.out::println).filter(...) logs elements. Use sparingly as it can impact performance and violates functional programming principles.\",\n    category: 'intermediate'\n  },\n  {\n    id: 46,\n    question: \"How do you create infinite streams in Java 8?\",\n    answer: \"Create infinite streams using: Stream.iterate(seed, function) for iterative generation, Stream.generate(supplier) for independent generation. Examples: Stream.iterate(0, n -> n + 1) creates natural numbers, Stream.generate(Math::random) creates random numbers. Always use limit() to avoid infinite processing.\",\n    category: 'intermediate'\n  },\n  {\n    id: 47,\n    question: \"What is the difference between Collection and Stream?\",\n    answer: \"Collections store data in memory and allow multiple traversals. Streams are computed on-demand, support only one-time traversal, and focus on computation rather than storage. Collections are eagerly constructed, streams are lazy. Streams enable functional processing pipelines while collections provide data storage.\",\n    category: 'intermediate'\n  },\n  {\n    id: 48,\n    question: \"How do you convert streams to arrays?\",\n    answer: \"Convert streams to arrays using: toArray() returns Object[], toArray(IntFunction<A[]>) returns typed array. Examples: stream.toArray(String[]::new) for String array, stream.mapToInt(Integer::intValue).toArray() for int array. Use appropriate method reference for desired array type.\",\n    category: 'intermediate'\n  },\n  {\n    id: 49,\n    question: \"What are method references and their types?\",\n    answer: \"Method references are shortcuts for lambda expressions that call existing methods. Types: 1) Static method: Class::staticMethod, 2) Instance method of specific object: object::instanceMethod, 3) Instance method of arbitrary object: Class::instanceMethod, 4) Constructor: Class::new. More readable than equivalent lambdas.\",\n    category: 'intermediate'\n  },\n  {\n    id: 50,\n    question: \"How do you use Comparator.comparing() effectively?\",\n    answer: \"Comparator.comparing() creates comparators from key extraction functions. Chain with thenComparing() for multiple criteria: Comparator.comparing(Person::getLastName).thenComparing(Person::getFirstName). Use reversed() for descending order. Supports nullsFirst()/nullsLast() for null handling.\",\n    category: 'intermediate'\n  },\n\n  // EXPERT - Advanced Features & Performance (25 cards)\n  {\n    id: 51,\n    question: \"What are parallel streams and how do they work?\",\n    answer: \"Parallel streams use ForkJoinPool to split work across multiple threads. Create with parallelStream() or parallel(). They decompose, process in parallel, and combine results. Best for CPU-intensive operations on large datasets. Use sequential() to switch back. Performance depends on data size, operation complexity, and available cores.\",\n    category: 'expert'\n  },\n  {\n    id: 52,\n    question: \"When should you use parallel streams?\",\n    answer: \"Use parallel streams when: 1) Large datasets (thousands+ elements), 2) CPU-intensive operations, 3) Independent operations (no shared mutable state), 4) Easily decomposable data structures (ArrayList, arrays). Avoid for: small datasets, I/O operations, operations with side effects, or when ordering matters.\",\n    category: 'expert'\n  },\n  {\n    id: 53,\n    question: \"What is the CompletableFuture class?\",\n    answer: \"CompletableFuture enables asynchronous programming and represents a computation that may complete in the future. Provides methods for chaining, combining, and handling async operations: thenApply(), thenCompose(), thenCombine(), exceptionally(). Supports both sync and async execution modes with optional custom executors.\",\n    category: 'expert'\n  },\n  {\n    id: 54,\n    question: \"How do you create CompletableFuture instances?\",\n    answer: \"Create CompletableFuture using: runAsync(Runnable) for void tasks, supplyAsync(Supplier) for value-returning tasks, completedFuture(value) for already-completed futures. Optional executor parameter for custom thread pools. CompletableFuture.allOf() and anyOf() for multiple futures.\",\n    category: 'expert'\n  },\n  {\n    id: 55,\n    question: \"What is the difference between thenApply() and thenCompose()?\",\n    answer: \"thenApply() transforms result of CompletableFuture using Function<T,R>, returning CompletableFuture<R>. thenCompose() is for chaining operations where function returns CompletableFuture<R>, flattening nested futures. Similar to map vs flatMap in streams. Use thenCompose() to avoid CompletableFuture<CompletableFuture<T>>.\",\n    category: 'expert'\n  },\n  {\n    id: 56,\n    question: \"How do you handle exceptions in CompletableFuture?\",\n    answer: \"Handle exceptions using: exceptionally(Function) for recovery, handle(BiFunction) for result and exception, whenComplete(BiConsumer) for side effects. Chain exception handling: future.thenApply(...).exceptionally(ex -> defaultValue). Use completeExceptionally() to propagate exceptions manually.\",\n    category: 'expert'\n  },\n  {\n    id: 57,\n    question: \"What is the new Date and Time API in Java 8?\",\n    answer: \"Java 8 introduced java.time package with immutable date-time classes: LocalDate, LocalTime, LocalDateTime (no timezone), ZonedDateTime (with timezone), Instant (timestamps), Duration and Period (time amounts). Replaces problematic Date and Calendar with thread-safe, fluent API.\",\n    category: 'expert'\n  },\n  {\n    id: 58,\n    question: \"How do you work with LocalDate, LocalTime, and LocalDateTime?\",\n    answer: \"LocalDate for dates (2023-12-25): LocalDate.now(), LocalDate.of(2023,12,25), plusDays(), minusMonths(). LocalTime for times (14:30): LocalTime.now(), LocalTime.of(14,30). LocalDateTime combines both: LocalDateTime.now(), atDate(), atTime(). All are immutable with fluent APIs.\",\n    category: 'expert'\n  },\n  {\n    id: 59,\n    question: \"What is the difference between Instant and LocalDateTime?\",\n    answer: \"Instant represents a point on the timeline (UTC timestamp), suitable for machine processing and logging. LocalDateTime represents date-time without timezone, suitable for human-readable dates. Instant is absolute, LocalDateTime is relative to timezone. Convert using atZone(), toInstant() methods.\",\n    category: 'expert'\n  },\n  {\n    id: 60,\n    question: \"How do you work with timezones in Java 8?\",\n    answer: \"Use ZonedDateTime for timezone-aware dates: ZonedDateTime.now(ZoneId.of(\\\"America/New_York\\\")). ZoneId represents timezones, ZoneOffset for fixed offsets. Convert between timezones using withZoneSameInstant(). OffsetDateTime for UTC offset without timezone rules.\",\n    category: 'expert'\n  },\n  {\n    id: 61,\n    question: \"What are DateTimeFormatter and parsing in Java 8?\",\n    answer: \"DateTimeFormatter formats and parses dates with predefined patterns (ISO_LOCAL_DATE) or custom patterns (\\\"yyyy-MM-dd HH:mm:ss\\\"). Use format() to convert to string, parse() to convert from string. Example: LocalDate.parse(\\\"2023-12-25\\\", DateTimeFormatter.ISO_LOCAL_DATE). Immutable and thread-safe.\",\n    category: 'expert'\n  },\n  {\n    id: 62,\n    question: \"What is the Stream.iterate() vs Stream.generate() difference?\",\n    answer: \"iterate(seed, function) creates sequential infinite stream by applying function to previous element: Stream.iterate(0, n -> n + 1). generate(supplier) creates infinite stream by calling supplier repeatedly: Stream.generate(Math::random). iterate is stateful, generate is stateless.\",\n    category: 'expert'\n  },\n  {\n    id: 63,\n    question: \"How do you configure parallel stream thread pool?\",\n    answer: \"Parallel streams use common ForkJoinPool by default. Configure using system property: -Djava.util.concurrent.ForkJoinPool.common.parallelism=4. For custom thread pool, use CompletableFuture.supplyAsync() with custom executor instead of parallel streams. Common pool size defaults to processor count - 1.\",\n    category: 'expert'\n  },\n  {\n    id: 64,\n    question: \"What are the characteristics of good parallel stream operations?\",\n    answer: \"Good parallel operations are: 1) Independent (no shared mutable state), 2) Stateless, 3) Non-interfering with data source, 4) Computationally expensive enough to justify overhead, 5) Work well with spliterators for data decomposition. Operations like filter, map work well; collect, findFirst may not.\",\n    category: 'expert'\n  },\n  {\n    id: 65,\n    question: \"What is Spliterator and how does it relate to parallel streams?\",\n    answer: \"Spliterator (splittable iterator) enables parallel processing by splitting data sources. It has characteristics like ORDERED, DISTINCT, SORTED, SIZED that help optimize operations. Good spliterators (ArrayList) enable efficient parallelization, poor ones (LinkedList) don't split well. Used internally by parallel streams.\",\n    category: 'expert'\n  },\n  {\n    id: 66,\n    question: \"How do you combine multiple CompletableFutures?\",\n    answer: \"Combine CompletableFutures using: thenCombine(other, BiFunction) for dependent results, allOf(futures...) waits for all, anyOf(futures...) waits for first completion. Use thenAcceptBoth() for consuming two results, runAfterBoth() for actions after both complete. Chain multiple combinations for complex workflows.\",\n    category: 'expert'\n  },\n  {\n    id: 67,\n    question: \"What is the Base64 API in Java 8?\",\n    answer: \"Java 8 added built-in Base64 support with Base64 class. Three encoders: basic (RFC 4648), URL-safe (RFC 4648 Section 5), MIME (RFC 2045). Methods: getEncoder().encodeToString(), getDecoder().decode(). Example: Base64.getEncoder().encodeToString(\\\"text\\\".getBytes()).\",\n    category: 'expert'\n  },\n  {\n    id: 68,\n    question: \"What are the performance implications of boxing in streams?\",\n    answer: \"Boxing/unboxing between primitives and wrapper classes creates performance overhead. Use specialized streams (IntStream, LongStream, DoubleStream) for primitive operations. Methods mapToInt(), mapToLong(), mapToDouble() convert to primitive streams. Primitive streams provide sum(), average(), max() without boxing.\",\n    category: 'expert'\n  },\n  {\n    id: 69,\n    question: \"How do you debug stream operations effectively?\",\n    answer: \"Debug streams using: 1) peek() for inspecting elements, 2) Breaking complex chains into steps, 3) Using intermediate variables, 4) Adding logging within lambdas, 5) IDE debugger support for stream operations. Consider extracting lambdas to named methods for better stack traces and debugging.\",\n    category: 'expert'\n  },\n  {\n    id: 70,\n    question: \"What are the best practices for using Java 8 features?\",\n    answer: \"Best practices: 1) Prefer method references over lambdas when possible, 2) Keep lambdas short and focused, 3) Use appropriate functional interfaces, 4) Avoid side effects in stream operations, 5) Use Optional to avoid null checks, 6) Choose sequential vs parallel streams based on data and operations, 7) Leverage specialized primitive streams.\",\n    category: 'expert'\n  },\n  {\n    id: 71,\n    question: \"What is the difference between Collection.stream() and Collection.parallelStream()?\",\n    answer: \"stream() creates sequential stream processed by current thread. parallelStream() creates parallel stream using ForkJoinPool for concurrent processing. Parallel streams split data, process chunks in parallel, then combine results. Choose based on data size, operation complexity, and performance requirements.\",\n    category: 'expert'\n  },\n  {\n    id: 72,\n    question: \"How do you create custom functional interfaces?\",\n    answer: \"Create functional interfaces with @FunctionalInterface annotation and exactly one abstract method. Can have default and static methods. Example: @FunctionalInterface interface Calculator { int calculate(int a, int b); default int square(int x) { return x * x; } }. Used with lambdas for specific domain logic.\",\n    category: 'expert'\n  },\n  {\n    id: 73,\n    question: \"What are the common pitfalls when using parallel streams?\",\n    answer: \"Pitfalls: 1) Using with small datasets (overhead exceeds benefits), 2) Shared mutable state causing race conditions, 3) Stateful operations breaking parallelism, 4) I/O operations blocking threads, 5) Incorrect assumptions about ordering, 6) Using with poorly splittable data structures. Always measure performance.\",\n    category: 'expert'\n  },\n  {\n    id: 74,\n    question: \"How do you work with Duration and Period in Java 8?\",\n    answer: \"Duration represents time-based amounts (hours, minutes, seconds): Duration.ofHours(2), duration.toMinutes(). Period represents date-based amounts (years, months, days): Period.ofDays(30), period.getMonths(). Use between() to calculate differences: Duration.between(start, end), Period.between(date1, date2).\",\n    category: 'expert'\n  },\n  {\n    id: 75,\n    question: \"What are the memory considerations for stream operations?\",\n    answer: \"Stream considerations: 1) Intermediate operations are lazy (low memory), 2) collect() operations may require significant memory, 3) sorted() requires full materialization, 4) Infinite streams need limit(), 5) Parallel streams use additional memory for work-stealing, 6) Large collectors like groupingBy() can consume substantial memory.\",\n    category: 'expert'\n  }\n];\n\nexport const quizQuestions: QuizQuestion[] = [\n  // BASICS QUIZ (25 questions)\n  {\n    id: 1,\n    question: \"What is the syntax for a simple lambda expression that adds two numbers?\",\n    options: [\"(x, y) => x + y\", \"(x, y) -> x + y\", \"x, y -> x + y\", \"lambda x, y: x + y\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 2,\n    question: \"Which annotation is used to mark functional interfaces?\",\n    options: [\"@Functional\", \"@FunctionalInterface\", \"@Lambda\", \"@Interface\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 3,\n    question: \"How many abstract methods can a functional interface have?\",\n    options: [\"Zero\", \"Exactly one\", \"One or more\", \"Any number\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 4,\n    question: \"Which functional interface represents a function that takes one argument and returns a result?\",\n    options: [\"Consumer<T>\", \"Supplier<T>\", \"Function<T,R>\", \"Predicate<T>\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 5,\n    question: \"What does the Predicate<T> functional interface represent?\",\n    options: [\"T -> void\", \"() -> T\", \"T -> R\", \"T -> boolean\"],\n    correctAnswer: 3,\n    category: 'basics'\n  },\n  {\n    id: 6,\n    question: \"Which method reference type is List::size?\",\n    options: [\"Static method reference\", \"Instance method of arbitrary object\", \"Instance method of specific object\", \"Constructor reference\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 7,\n    question: \"What is the result of Stream.of(1,2,3,4).filter(x -> x > 2).count()?\",\n    options: [\"1\", \"2\", \"3\", \"4\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 8,\n    question: \"Which operation is NOT a terminal operation?\",\n    options: [\"forEach\", \"collect\", \"map\", \"reduce\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 9,\n    question: \"How do you create an empty Optional?\",\n    options: [\"new Optional()\", \"Optional.null()\", \"Optional.empty()\", \"Optional.of(null)\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 10,\n    question: \"What happens when you call Optional.of(null)?\",\n    options: [\"Returns empty Optional\", \"Returns Optional with null value\", \"Throws NullPointerException\", \"Compilation error\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 11,\n    question: \"Which method should you use to safely create an Optional that might be null?\",\n    options: [\"Optional.of()\", \"Optional.empty()\", \"Optional.ofNullable()\", \"Optional.nullable()\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 12,\n    question: \"What is the purpose of default methods in interfaces?\",\n    options: [\"Provide default values\", \"Enable interface evolution\", \"Improve performance\", \"Replace abstract methods\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 13,\n    question: \"How do you create a stream from a collection?\",\n    options: [\"collection.toStream()\", \"Stream.of(collection)\", \"collection.stream()\", \"new Stream(collection)\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 14,\n    question: \"What does the map() operation do in streams?\",\n    options: [\"Filters elements\", \"Transforms elements\", \"Sorts elements\", \"Counts elements\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 15,\n    question: \"Which stream operation would you use to remove duplicates?\",\n    options: [\"filter()\", \"distinct()\", \"unique()\", \"dedupe()\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 16,\n    question: \"What is the return type of stream.collect(Collectors.toList())?\",\n    options: [\"Stream<List>\", \"Optional<List>\", \"List\", \"Collection\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 17,\n    question: \"Which operation limits the stream to the first n elements?\",\n    options: [\"take(n)\", \"limit(n)\", \"first(n)\", \"head(n)\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 18,\n    question: \"What does IntStream provide that Stream<Integer> doesn't?\",\n    options: [\"Better performance\", \"More methods\", \"Primitive operations\", \"All of the above\"],\n    correctAnswer: 3,\n    category: 'basics'\n  },\n  {\n    id: 19,\n    question: \"How do you convert a Stream<String> to IntStream?\",\n    options: [\"mapToInt()\", \"asInt()\", \"toIntStream()\", \"convertInt()\"],\n    correctAnswer: 0,\n    category: 'basics'\n  },\n  {\n    id: 20,\n    question: \"What is the difference between findFirst() and findAny()?\",\n    options: [\"No difference\", \"findFirst() is for sequential, findAny() for parallel\", \"findFirst() returns first element, findAny() any element\", \"findAny() is deprecated\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 21,\n    question: \"Which matching operation returns true if all elements satisfy the predicate?\",\n    options: [\"anyMatch()\", \"allMatch()\", \"noneMatch()\", \"fullMatch()\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 22,\n    question: \"What does the skip(n) operation do?\",\n    options: [\"Skips every nth element\", \"Skips the first n elements\", \"Skips the last n elements\", \"Skips n random elements\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 23,\n    question: \"How do you sort a stream in descending order by natural ordering?\",\n    options: [\"sorted(descending())\", \"sorted(Comparator.reversed())\", \"sorted(Collections.reverseOrder())\", \"sorted().reverse()\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 24,\n    question: \"What is lazy evaluation in streams?\",\n    options: [\"Slow processing\", \"Operations execute only when terminal operation is called\", \"Delayed method calls\", \"Caching results\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 25,\n    question: \"Which lambda expression is equivalent to System.out::println?\",\n    options: [\"() -> System.out.println()\", \"x -> System.out.println()\", \"x -> System.out.println(x)\", \"System.out.println()\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n\n  // INTERMEDIATE QUIZ (25 questions)\n  {\n    id: 26,\n    question: \"What does flatMap() do in streams?\",\n    options: [\"Flattens nested collections\", \"Maps and filters simultaneously\", \"Creates 2D mappings\", \"Reduces dimensions\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 27,\n    question: \"How do you group elements by a property using collectors?\",\n    options: [\"groupBy()\", \"groupingBy()\", \"collect()\", \"partition()\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 28,\n    question: \"What is the result type of Collectors.groupingBy(Person::getAge)?\",\n    options: [\"List<Person>\", \"Map<Integer, Person>\", \"Map<Integer, List<Person>>\", \"Set<Person>\"],\n    correctAnswer: 2,\n    category: 'intermediate'\n  },\n  {\n    id: 29,\n    question: \"Which collector partitions elements based on a boolean predicate?\",\n    options: [\"partitioningBy()\", \"groupingBy()\", \"separatingBy()\", \"dividingBy()\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 30,\n    question: \"What does the joining() collector do?\",\n    options: [\"Joins two streams\", \"Concatenates elements into a string\", \"Merges collections\", \"Combines results\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 31,\n    question: \"How do you count elements while grouping?\",\n    options: [\"groupingBy(classifier, count())\", \"groupingBy(classifier, counting())\", \"groupingBy(classifier).count()\", \"countingBy(classifier)\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 32,\n    question: \"What is the difference between reduce() forms?\",\n    options: [\"No difference\", \"Different parameter counts\", \"Different return types\", \"Both B and C\"],\n    correctAnswer: 3,\n    category: 'intermediate'\n  },\n  {\n    id: 33,\n    question: \"Which method should you use instead of Optional.get()?\",\n    options: [\"Optional.value()\", \"Optional.orElse()\", \"Optional.retrieve()\", \"Optional.extract()\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 34,\n    question: \"When should you use orElseGet() instead of orElse()?\",\n    options: [\"Never\", \"When default value creation is expensive\", \"When value is null\", \"Always\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 35,\n    question: \"How do you chain Optional operations?\",\n    options: [\"Using if-else\", \"Using map() and flatMap()\", \"Using get() and set()\", \"Cannot be chained\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 36,\n    question: \"What does Optional.filter() do?\",\n    options: [\"Filters the Optional value\", \"Returns filtered Optional\", \"Both A and B\", \"Throws exception\"],\n    correctAnswer: 2,\n    category: 'intermediate'\n  },\n  {\n    id: 37,\n    question: \"Which collector converts to a different collection type?\",\n    options: [\"toList()\", \"toCollection()\", \"toSet()\", \"All of the above\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 38,\n    question: \"How do you get summary statistics for integers in a stream?\",\n    options: [\"summarizing()\", \"summarizingInt()\", \"summaryStats()\", \"statisticsInt()\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 39,\n    question: \"What does collectingAndThen() do?\",\n    options: [\"Collects and transforms result\", \"Collects in sequence\", \"Collects and terminates\", \"Collects conditionally\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 40,\n    question: \"How do you perform multi-level grouping?\",\n    options: [\"Use multiple collect() calls\", \"Use nested groupingBy()\", \"Use groupBy() twice\", \"Not possible\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 41,\n    question: \"What is the purpose of peek() operation?\",\n    options: [\"Debug and inspect elements\", \"Transform elements\", \"Filter elements\", \"Count elements\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 42,\n    question: \"How do you create an infinite stream of random numbers?\",\n    options: [\"Stream.infinite(Math::random)\", \"Stream.generate(Math::random)\", \"Stream.random()\", \"Stream.iterate(Math::random)\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 43,\n    question: \"What is the difference between Stream.iterate() and Stream.generate()?\",\n    options: [\"No difference\", \"iterate() is sequential, generate() is stateless\", \"generate() is deprecated\", \"iterate() is for numbers only\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 44,\n    question: \"How do you convert a stream to an array?\",\n    options: [\"stream.asArray()\", \"stream.toArray()\", \"stream.array()\", \"stream.collect(toArray())\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 45,\n    question: \"Which is the correct way to handle exceptions in streams?\",\n    options: [\"Use try-catch in lambda\", \"Wrap in runtime exception\", \"Use Optional for failures\", \"All of the above\"],\n    correctAnswer: 3,\n    category: 'intermediate'\n  },\n  {\n    id: 46,\n    question: \"What does Comparator.comparing() return?\",\n    options: [\"boolean\", \"int\", \"Comparator\", \"Comparable\"],\n    correctAnswer: 2,\n    category: 'intermediate'\n  },\n  {\n    id: 47,\n    question: \"How do you chain multiple comparison criteria?\",\n    options: [\"Use multiple comparing()\", \"Use thenComparing()\", \"Use andComparing()\", \"Use addComparing()\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 48,\n    question: \"What happens if you call a terminal operation twice on the same stream?\",\n    options: [\"Works normally\", \"Returns cached result\", \"Throws IllegalStateException\", \"Returns empty result\"],\n    correctAnswer: 2,\n    category: 'intermediate'\n  },\n  {\n    id: 49,\n    question: \"How do you reverse a comparator?\",\n    options: [\"Comparator.reverse()\", \"comparator.reversed()\", \"Collections.reverse(comparator)\", \"comparator.invert()\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 50,\n    question: \"What is the purpose of downstream collectors?\",\n    options: [\"Process grouped data further\", \"Improve performance\", \"Handle errors\", \"Sort results\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n\n  // EXPERT QUIZ (25 questions)\n  {\n    id: 51,\n    question: \"When should you use parallel streams?\",\n    options: [\"Always for better performance\", \"For small datasets\", \"For large datasets with CPU-intensive operations\", \"Never\"],\n    correctAnswer: 2,\n    category: 'expert'\n  },\n  {\n    id: 52,\n    question: \"Which data structure is best for parallel stream performance?\",\n    options: [\"LinkedList\", \"ArrayList\", \"TreeSet\", \"HashMap\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 53,\n    question: \"How do you create a CompletableFuture that returns a value?\",\n    options: [\"CompletableFuture.runAsync()\", \"CompletableFuture.supplyAsync()\", \"CompletableFuture.completedFuture()\", \"new CompletableFuture()\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 54,\n    question: \"What is the difference between thenApply() and thenCompose()?\",\n    options: [\"No difference\", \"thenApply() for transformation, thenCompose() for chaining\", \"thenCompose() is deprecated\", \"thenApply() is synchronous\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 55,\n    question: \"How do you handle exceptions in CompletableFuture?\",\n    options: [\"try-catch blocks\", \"exceptionally() method\", \"handle() method\", \"Both B and C\"],\n    correctAnswer: 3,\n    category: 'expert'\n  },\n  {\n    id: 56,\n    question: \"Which class represents a date without time zone?\",\n    options: [\"ZonedDateTime\", \"LocalDateTime\", \"Instant\", \"OffsetDateTime\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 57,\n    question: \"What is the difference between Duration and Period?\",\n    options: [\"No difference\", \"Duration for time-based, Period for date-based\", \"Period is deprecated\", \"Duration is more precise\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 58,\n    question: \"How do you format a LocalDate?\",\n    options: [\"date.format(pattern)\", \"DateTimeFormatter.format(date)\", \"date.format(DateTimeFormatter)\", \"format(date, pattern)\"],\n    correctAnswer: 2,\n    category: 'expert'\n  },\n  {\n    id: 59,\n    question: \"Which represents an absolute point in time?\",\n    options: [\"LocalDateTime\", \"ZonedDateTime\", \"Instant\", \"OffsetDateTime\"],\n    correctAnswer: 2,\n    category: 'expert'\n  },\n  {\n    id: 60,\n    question: \"How do you configure parallel stream thread pool size?\",\n    options: [\"Stream.setParallelism()\", \"System property\", \"ForkJoinPool.setParallelism()\", \"Runtime.setThreads()\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 61,\n    question: \"What is Spliterator used for?\",\n    options: [\"Splitting collections\", \"Parallel stream processing\", \"Iterator enhancement\", \"All of the above\"],\n    correctAnswer: 3,\n    category: 'expert'\n  },\n  {\n    id: 62,\n    question: \"How do you combine two CompletableFutures?\",\n    options: [\"thenCombine()\", \"thenMerge()\", \"thenJoin()\", \"thenUnion()\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 63,\n    question: \"What does CompletableFuture.allOf() do?\",\n    options: [\"Waits for all futures to complete\", \"Combines all results\", \"Returns first completed\", \"Cancels all futures\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 64,\n    question: \"Which Java 8 feature provides Base64 encoding?\",\n    options: [\"java.util.Base64\", \"java.security.Base64\", \"java.nio.Base64\", \"java.encoding.Base64\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 65,\n    question: \"What is the main advantage of primitive streams?\",\n    options: [\"Simpler syntax\", \"No boxing/unboxing overhead\", \"Better readability\", \"More methods\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 66,\n    question: \"How do you debug complex stream operations?\",\n    options: [\"Use peek()\", \"Break into steps\", \"Add logging\", \"All of the above\"],\n    correctAnswer: 3,\n    category: 'expert'\n  },\n  {\n    id: 67,\n    question: \"What is a common pitfall with parallel streams?\",\n    options: [\"Using with small datasets\", \"Shared mutable state\", \"I/O operations\", \"All of the above\"],\n    correctAnswer: 3,\n    category: 'expert'\n  },\n  {\n    id: 68,\n    question: \"How do you create a custom functional interface?\",\n    options: [\"@FunctionalInterface with one abstract method\", \"@Lambda annotation\", \"extends Function\", \"implements Functional\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 69,\n    question: \"What does the @FunctionalInterface annotation do?\",\n    options: [\"Makes interface functional\", \"Enables lambda usage\", \"Ensures single abstract method\", \"Improves performance\"],\n    correctAnswer: 2,\n    category: 'expert'\n  },\n  {\n    id: 70,\n    question: \"Which operation requires full stream materialization?\",\n    options: [\"filter()\", \"map()\", \"sorted()\", \"limit()\"],\n    correctAnswer: 2,\n    category: 'expert'\n  },\n  {\n    id: 71,\n    question: \"How do you calculate time between two LocalDateTime instances?\",\n    options: [\"Duration.between()\", \"Period.between()\", \"ChronoUnit.between()\", \"Both A and C\"],\n    correctAnswer: 3,\n    category: 'expert'\n  },\n  {\n    id: 72,\n    question: \"What is the ForkJoinPool used for?\",\n    options: [\"Sequential processing\", \"Parallel stream execution\", \"Thread management\", \"Both B and C\"],\n    correctAnswer: 3,\n    category: 'expert'\n  },\n  {\n    id: 73,\n    question: \"How do you handle timezone conversion?\",\n    options: [\"withZoneSameInstant()\", \"toZone()\", \"convertZone()\", \"setTimeZone()\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 74,\n    question: \"What is the difference between sequential() and parallel() on streams?\",\n    options: [\"Performance only\", \"Changes execution mode\", \"No difference\", \"Changes result type\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 75,\n    question: \"How do you ensure thread safety with CompletableFuture?\",\n    options: [\"Use synchronized\", \"Use locks\", \"CompletableFuture is thread-safe\", \"Use volatile\"],\n    correctAnswer: 2,\n    category: 'expert'\n  }\n];"],"names":["categoryData","flashcards","quizQuestions"],"mappings":"AAEO,MAAMA,EAA+C,CAC1D,OAAQ,CACN,KAAM,gBACN,MAAO,UACP,YAAa,2FAAA,EAEf,aAAc,CACZ,KAAM,sBACN,MAAO,UACP,YAAa,6EAAA,EAEf,OAAQ,CACN,KAAM,gBACN,MAAO,UACP,YAAa,6EAAA,CAEjB,EAEaC,EAA0B,CAErC,CACE,GAAI,EACJ,SAAU,yCACV,OAAQ,8RACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,4CACV,OAAQ,2SACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,yDACV,OAAQ,sRACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,wCACV,OAAQ,mUACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,oCACV,OAAQ,ySACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,kFACV,OAAQ,qTACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,uCACV,OAAQ,mPACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,6CACV,OAAQ,iRACR,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,0CACV,OAAQ,yQACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8CACV,OAAQ,4PACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8CACV,OAAQ,gRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iDACV,OAAQ,yRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kDACV,OAAQ,iQACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wCACV,OAAQ,yRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sCACV,OAAQ,yPACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,6CACV,OAAQ,yRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+CACV,OAAQ,kRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,OAAQ,oRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+CACV,OAAQ,4PACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4CACV,OAAQ,mPACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4CACV,OAAQ,0QACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2CACV,OAAQ,6PACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+CACV,OAAQ,uRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,6CACV,OAAQ,iRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sDACV,OAAQ,wRACR,SAAU,QAAA,EAIZ,CACE,GAAI,GACJ,SAAU,8CACV,OAAQ,wSACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iCACV,OAAQ,8SACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wCACV,OAAQ,wSACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sCACV,OAAQ,yRACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,0DACV,OAAQ,+SACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2CACV,OAAQ,qSACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,uCACV,OAAQ,8RACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kDACV,OAAQ,qQACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iDACV,OAAQ,0SACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2DACV,OAAQ,0QACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wCACV,OAAQ,gRACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,uDACV,OAAQ,kUACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,uEACV,OAAQ,qRACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sDACV,OAAQ,oQACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+CACV,OAAQ,0SACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,6CACV,OAAQ,iRACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2CACV,OAAQ,4QACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sDACV,OAAQ,iTACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,qDACV,OAAQ,kTACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2DACV,OAAQ,mTACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gDACV,OAAQ,wTACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wDACV,OAAQ,+TACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wCACV,OAAQ,6RACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8CACV,OAAQ,oUACR,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,qDACV,OAAQ,uSACR,SAAU,cAAA,EAIZ,CACE,GAAI,GACJ,SAAU,kDACV,OAAQ,oVACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wCACV,OAAQ,uTACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,uCACV,OAAQ,qUACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iDACV,OAAQ,6RACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gEACV,OAAQ,qUACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,qDACV,OAAQ,0SACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+CACV,OAAQ,yRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gEACV,OAAQ,uRACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,OAAQ,4SACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4CACV,OAAQ,wQACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oDACV,OAAQ,2SACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gEACV,OAAQ,4RACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oDACV,OAAQ,kTACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,mEACV,OAAQ,gTACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kEACV,OAAQ,qUACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kDACV,OAAQ,4TACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oCACV,OAAQ,2QACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8DACV,OAAQ,8TACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kDACV,OAAQ,uSACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,yDACV,OAAQ,2VACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sFACV,OAAQ,uTACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kDACV,OAAQ,wTACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,OAAQ,8TACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sDACV,OAAQ,sTACR,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,OAAQ,mVACR,SAAU,QAAA,CAEd,EAEaC,EAAgC,CAE3C,CACE,GAAI,EACJ,SAAU,2EACV,QAAS,CAAC,kBAAmB,kBAAmB,gBAAiB,oBAAoB,EACrF,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,0DACV,QAAS,CAAC,cAAe,uBAAwB,UAAW,YAAY,EACxE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,6DACV,QAAS,CAAC,OAAQ,cAAe,cAAe,YAAY,EAC5D,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,iGACV,QAAS,CAAC,cAAe,cAAe,gBAAiB,cAAc,EACvE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,6DACV,QAAS,CAAC,YAAa,UAAW,SAAU,cAAc,EAC1D,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,6CACV,QAAS,CAAC,0BAA2B,sCAAuC,qCAAsC,uBAAuB,EACzI,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,uEACV,QAAS,CAAC,IAAK,IAAK,IAAK,GAAG,EAC5B,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,+CACV,QAAS,CAAC,UAAW,UAAW,MAAO,QAAQ,EAC/C,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,EACJ,SAAU,uCACV,QAAS,CAAC,iBAAkB,kBAAmB,mBAAoB,mBAAmB,EACtF,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gDACV,QAAS,CAAC,yBAA0B,mCAAoC,8BAA+B,mBAAmB,EAC1H,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+EACV,QAAS,CAAC,gBAAiB,mBAAoB,wBAAyB,qBAAqB,EAC7F,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wDACV,QAAS,CAAC,yBAA0B,6BAA8B,sBAAuB,0BAA0B,EACnH,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gDACV,QAAS,CAAC,wBAAyB,wBAAyB,sBAAuB,wBAAwB,EAC3G,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+CACV,QAAS,CAAC,mBAAoB,sBAAuB,iBAAkB,iBAAiB,EACxF,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,6DACV,QAAS,CAAC,WAAY,aAAc,WAAY,UAAU,EAC1D,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kEACV,QAAS,CAAC,eAAgB,iBAAkB,OAAQ,YAAY,EAChE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,6DACV,QAAS,CAAC,UAAW,WAAY,WAAY,SAAS,EACtD,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,QAAS,CAAC,qBAAsB,eAAgB,uBAAwB,kBAAkB,EAC1F,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oDACV,QAAS,CAAC,aAAc,UAAW,gBAAiB,cAAc,EAClE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,QAAS,CAAC,gBAAiB,wDAAyD,2DAA4D,yBAAyB,EACzK,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,+EACV,QAAS,CAAC,aAAc,aAAc,cAAe,aAAa,EAClE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sCACV,QAAS,CAAC,0BAA2B,6BAA8B,4BAA6B,yBAAyB,EACzH,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oEACV,QAAS,CAAC,uBAAwB,gCAAiC,qCAAsC,oBAAoB,EAC7H,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sCACV,QAAS,CAAC,kBAAmB,4DAA6D,uBAAwB,iBAAiB,EACnI,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gEACV,QAAS,CAAC,6BAA8B,4BAA6B,6BAA8B,sBAAsB,EACzH,cAAe,EACf,SAAU,QAAA,EAIZ,CACE,GAAI,GACJ,SAAU,qCACV,QAAS,CAAC,8BAA+B,kCAAmC,sBAAuB,oBAAoB,EACvH,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,QAAS,CAAC,YAAa,eAAgB,YAAa,aAAa,EACjE,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oEACV,QAAS,CAAC,eAAgB,uBAAwB,6BAA8B,aAAa,EAC7F,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oEACV,QAAS,CAAC,mBAAoB,eAAgB,iBAAkB,cAAc,EAC9E,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wCACV,QAAS,CAAC,oBAAqB,sCAAuC,qBAAsB,kBAAkB,EAC9G,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4CACV,QAAS,CAAC,kCAAmC,qCAAsC,iCAAkC,wBAAwB,EAC7I,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iDACV,QAAS,CAAC,gBAAiB,6BAA8B,yBAA0B,cAAc,EACjG,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,yDACV,QAAS,CAAC,mBAAoB,oBAAqB,sBAAuB,oBAAoB,EAC9F,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,uDACV,QAAS,CAAC,QAAS,2CAA4C,qBAAsB,QAAQ,EAC7F,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wCACV,QAAS,CAAC,gBAAiB,4BAA6B,wBAAyB,mBAAmB,EACpG,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kCACV,QAAS,CAAC,6BAA8B,4BAA6B,eAAgB,kBAAkB,EACvG,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2DACV,QAAS,CAAC,WAAY,iBAAkB,UAAW,kBAAkB,EACrE,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8DACV,QAAS,CAAC,gBAAiB,mBAAoB,iBAAkB,iBAAiB,EAClF,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oCACV,QAAS,CAAC,iCAAkC,uBAAwB,0BAA2B,wBAAwB,EACvH,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2CACV,QAAS,CAAC,+BAAgC,0BAA2B,sBAAuB,cAAc,EAC1G,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2CACV,QAAS,CAAC,6BAA8B,qBAAsB,kBAAmB,gBAAgB,EACjG,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,0DACV,QAAS,CAAC,gCAAiC,gCAAiC,kBAAmB,8BAA8B,EAC7H,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,yEACV,QAAS,CAAC,gBAAiB,mDAAoD,2BAA4B,+BAA+B,EAC1I,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2CACV,QAAS,CAAC,mBAAoB,mBAAoB,iBAAkB,2BAA2B,EAC/F,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,4DACV,QAAS,CAAC,0BAA2B,4BAA6B,4BAA6B,kBAAkB,EACjH,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,2CACV,QAAS,CAAC,UAAW,MAAO,aAAc,YAAY,EACtD,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iDACV,QAAS,CAAC,2BAA4B,sBAAuB,qBAAsB,oBAAoB,EACvG,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,0EACV,QAAS,CAAC,iBAAkB,wBAAyB,+BAAgC,sBAAsB,EAC3G,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,mCACV,QAAS,CAAC,uBAAwB,wBAAyB,kCAAmC,qBAAqB,EACnH,cAAe,EACf,SAAU,cAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gDACV,QAAS,CAAC,+BAAgC,sBAAuB,gBAAiB,cAAc,EAChG,cAAe,EACf,SAAU,cAAA,EAIZ,CACE,GAAI,GACJ,SAAU,wCACV,QAAS,CAAC,gCAAiC,qBAAsB,mDAAoD,OAAO,EAC5H,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gEACV,QAAS,CAAC,aAAc,YAAa,UAAW,SAAS,EACzD,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8DACV,QAAS,CAAC,+BAAgC,kCAAmC,sCAAuC,yBAAyB,EAC7I,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gEACV,QAAS,CAAC,gBAAiB,6DAA8D,8BAA+B,4BAA4B,EACpJ,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,qDACV,QAAS,CAAC,mBAAoB,yBAA0B,kBAAmB,cAAc,EACzF,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,mDACV,QAAS,CAAC,gBAAiB,gBAAiB,UAAW,gBAAgB,EACvE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,sDACV,QAAS,CAAC,gBAAiB,iDAAkD,uBAAwB,0BAA0B,EAC/H,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iCACV,QAAS,CAAC,uBAAwB,iCAAkC,iCAAkC,uBAAuB,EAC7H,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8CACV,QAAS,CAAC,gBAAiB,gBAAiB,UAAW,gBAAgB,EACvE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,yDACV,QAAS,CAAC,0BAA2B,kBAAmB,gCAAiC,sBAAsB,EAC/G,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,gCACV,QAAS,CAAC,wBAAyB,6BAA8B,uBAAwB,kBAAkB,EAC3G,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,6CACV,QAAS,CAAC,gBAAiB,cAAe,aAAc,aAAa,EACrE,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,0CACV,QAAS,CAAC,oCAAqC,uBAAwB,0BAA2B,qBAAqB,EACvH,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iDACV,QAAS,CAAC,mBAAoB,uBAAwB,kBAAmB,sBAAsB,EAC/F,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,mDACV,QAAS,CAAC,iBAAkB,8BAA+B,qBAAsB,cAAc,EAC/F,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,8CACV,QAAS,CAAC,aAAc,mBAAoB,cAAe,kBAAkB,EAC7E,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,kDACV,QAAS,CAAC,4BAA6B,uBAAwB,iBAAkB,kBAAkB,EACnG,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,mDACV,QAAS,CAAC,gDAAiD,qBAAsB,mBAAoB,uBAAuB,EAC5H,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,oDACV,QAAS,CAAC,6BAA8B,uBAAwB,iCAAkC,sBAAsB,EACxH,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,wDACV,QAAS,CAAC,WAAY,QAAS,WAAY,SAAS,EACpD,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,iEACV,QAAS,CAAC,qBAAsB,mBAAoB,uBAAwB,cAAc,EAC1F,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,qCACV,QAAS,CAAC,wBAAyB,4BAA6B,oBAAqB,cAAc,EACnG,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,yCACV,QAAS,CAAC,wBAAyB,WAAY,gBAAiB,eAAe,EAC/E,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,yEACV,QAAS,CAAC,mBAAoB,yBAA0B,gBAAiB,qBAAqB,EAC9F,cAAe,EACf,SAAU,QAAA,EAEZ,CACE,GAAI,GACJ,SAAU,0DACV,QAAS,CAAC,mBAAoB,YAAa,mCAAoC,cAAc,EAC7F,cAAe,EACf,SAAU,QAAA,CAEd"}