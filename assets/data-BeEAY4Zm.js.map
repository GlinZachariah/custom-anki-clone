{"version":3,"file":"data-BeEAY4Zm.js","sources":["../../src/topics/java/data.ts"],"sourcesContent":["import { Flashcard, QuizQuestion, Category, CategoryData } from '../../types';\n\nexport const categoryData: Record<Category, CategoryData> = {\n  basics: {\n    name: 'Java Basics',\n    color: '#4CAF50',\n    description: 'Java fundamentals, data types, variables, and basic syntax'\n  },\n  intermediate: {\n    name: 'Java Intermediate',\n    color: '#FF9800',\n    description: 'Object-oriented programming, collections, exceptions, and I/O'\n  },\n  expert: {\n    name: 'Java Expert',\n    color: '#F44336',\n    description: 'Advanced topics: multithreading, reflection, generics, and frameworks'\n  }\n};\n\nexport const flashcards: Flashcard[] = [\n  // BASICS - Java Fundamentals (40+ cards)\n  {\n    id: 1,\n    question: \"What are the primitive data types in Java?\",\n    answer: \"Java has 8 primitive data types: byte (-128 to 127), short (-32,768 to 32,767), int (-2^31 to 2^31-1), long (-2^63 to 2^63-1), float (32-bit IEEE 754), double (64-bit IEEE 754), boolean (true/false), and char (16-bit Unicode character).\",\n    category: 'basics'\n  },\n  {\n    id: 2,\n    question: \"What is the difference between char and short in Java?\",\n    answer: \"Both are 2-byte types, but char is unsigned (0 to 65,535) and represents Unicode characters, while short is signed (-32,768 to 32,767). char cannot store negative values, but short can.\",\n    category: 'basics'\n  },\n  {\n    id: 3,\n    question: \"How do you declare and initialize variables in Java?\",\n    answer: \"Variables are declared with: dataType variableName; and initialized with: variableName = value; or combined: dataType variableName = value; Example: int age = 25; String name = \\\"John\\\";\",\n    category: 'basics'\n  },\n  {\n    id: 4,\n    question: \"What is the Scanner class used for in Java?\",\n    answer: \"Scanner is used for reading input from various sources (keyboard, files). Common methods: nextInt() for integers, nextDouble() for doubles, next() for strings, and nextLine() for entire lines. Must import java.util.Scanner.\",\n    category: 'basics'\n  },\n  {\n    id: 5,\n    question: \"What are Java wrapper classes?\",\n    answer: \"Wrapper classes are object representations of primitive types: Byte, Short, Integer, Long, Float, Double, Boolean, Character. They allow primitives to be used where objects are required and provide utility methods.\",\n    category: 'basics'\n  },\n  {\n    id: 6,\n    question: \"Explain autoboxing and unboxing in Java.\",\n    answer: \"Autoboxing automatically converts primitives to wrapper objects (int to Integer). Unboxing converts wrapper objects back to primitives (Integer to int). Introduced in Java 5, this happens automatically: Integer i = 10; int j = i;\",\n    category: 'basics'\n  },\n  {\n    id: 7,\n    question: \"How do you convert between String and primitive types?\",\n    answer: \"String to primitive: use parseXxx() methods (Integer.parseInt(\\\"123\\\")). Primitive to String: use String.valueOf(123) or concatenation (123 + \\\"\\\"). Wrapper classes also have valueOf() methods.\",\n    category: 'basics'\n  },\n  {\n    id: 8,\n    question: \"What are Java operators and their precedence?\",\n    answer: \"Java operators include arithmetic (+, -, *, /, %), relational (<, >, ==, !=), logical (&&, ||, !), assignment (=, +=, -=), and bitwise (&, |, ^). Precedence: () > *, /, % > +, - > <, >, <=, >= > ==, != > && > || > =\",\n    category: 'basics'\n  },\n  {\n    id: 9,\n    question: \"What are the different types of loops in Java?\",\n    answer: \"Java has three loop types: for loop (for(init; condition; increment)), while loop (while(condition)), and do-while loop (do {...} while(condition)). Enhanced for-each loop: for(type var : collection).\",\n    category: 'basics'\n  },\n  {\n    id: 10,\n    question: \"Explain conditional statements in Java.\",\n    answer: \"Java has if-else statements (if(condition) {...} else {...}), switch statements (switch(variable) {case value: ... break;}), and ternary operator (condition ? value1 : value2).\",\n    category: 'basics'\n  },\n  {\n    id: 11,\n    question: \"What is method overloading in Java?\",\n    answer: \"Method overloading allows multiple methods with the same name but different parameters (different number, type, or order). The compiler determines which method to call based on the arguments provided at compile time.\",\n    category: 'basics'\n  },\n  {\n    id: 12,\n    question: \"What are access modifiers in Java?\",\n    answer: \"Java has four access modifiers: public (accessible everywhere), private (accessible only within same class), protected (accessible within package and subclasses), and default/package-private (accessible within same package).\",\n    category: 'basics'\n  },\n  {\n    id: 13,\n    question: \"What is the difference between = and == in Java?\",\n    answer: \"= is the assignment operator used to assign values to variables. == is the equality operator used to compare values (for primitives) or references (for objects). For object content comparison, use .equals() method.\",\n    category: 'basics'\n  },\n  {\n    id: 14,\n    question: \"How do you create and use arrays in Java?\",\n    answer: \"Arrays are declared as: type[] arrayName = new type[size]; or type[] arrayName = {val1, val2, val3}; Access elements with arrayName[index]. Arrays have a length property: arrayName.length.\",\n    category: 'basics'\n  },\n  {\n    id: 15,\n    question: \"What is the main method signature in Java?\",\n    answer: \"The main method signature is: public static void main(String[] args). 'public' makes it accessible, 'static' allows calling without object creation, 'void' means no return value, and 'String[] args' accepts command-line arguments.\",\n    category: 'basics'\n  },\n  {\n    id: 16,\n    question: \"What are Java keywords?\",\n    answer: \"Keywords are reserved words with special meaning: class, public, static, void, int, if, else, for, while, do, switch, case, break, continue, return, try, catch, finally, throw, throws, new, this, super, extends, implements, abstract, final, interface, package, import, etc.\",\n    category: 'basics'\n  },\n  {\n    id: 17,\n    question: \"What is the difference between ++i and i++?\",\n    answer: \"++i (pre-increment) increments i and returns the new value. i++ (post-increment) returns the current value of i, then increments it. In expressions: int a = ++i; (a gets i+1), int b = i++; (b gets current i, then i is incremented).\",\n    category: 'basics'\n  },\n  {\n    id: 18,\n    question: \"How do you handle multiple data types input with Scanner?\",\n    answer: \"Use appropriate Scanner methods: nextInt() for integers, nextDouble() for doubles, next() for single words, nextLine() for full lines. Be aware of InputMismatchException when input doesn't match expected type.\",\n    category: 'basics'\n  },\n  {\n    id: 19,\n    question: \"What is type casting in Java?\",\n    answer: \"Type casting converts one data type to another. Implicit casting (widening): smaller to larger types automatically. Explicit casting (narrowing): larger to smaller types requires manual casting: (int)3.14. May cause data loss.\",\n    category: 'basics'\n  },\n  {\n    id: 20,\n    question: \"What are escape sequences in Java?\",\n    answer: \"Escape sequences represent special characters: \\\\n (newline), \\\\t (tab), \\\\\\\" (double quote), \\\\' (single quote), \\\\\\\\ (backslash), \\\\r (carriage return), \\\\uXXXX (Unicode character).\",\n    category: 'basics'\n  },\n  {\n    id: 21,\n    question: \"What is the difference between String and char in Java?\",\n    answer: \"char represents a single 16-bit Unicode character (primitive type), declared with single quotes: char c = 'A'. String represents a sequence of characters (object), declared with double quotes: String s = \\\"Hello\\\".\",\n    category: 'basics'\n  },\n  {\n    id: 22,\n    question: \"How do you comment code in Java?\",\n    answer: \"Java supports three comment types: single-line (//, comment to end of line), multi-line (/* comment across multiple lines */), and documentation comments (/** for JavaDoc generation */).\",\n    category: 'basics'\n  },\n  {\n    id: 23,\n    question: \"What is the range of byte data type and what happens with overflow?\",\n    answer: \"Byte ranges from -128 to 127. When overflow occurs, it wraps around. For example, (byte)128 becomes -128 because the sign bit flips. This is due to two's complement representation in Java.\",\n    category: 'basics'\n  },\n  {\n    id: 24,\n    question: \"What are logical operators in Java?\",\n    answer: \"Logical operators: && (logical AND), || (logical OR), ! (logical NOT). && and || are short-circuit operators (don't evaluate second operand if first determines result). & and | are bitwise operators that always evaluate both operands.\",\n    category: 'basics'\n  },\n  {\n    id: 25,\n    question: \"How do you use the break and continue statements?\",\n    answer: \"break terminates the loop or switch statement immediately and transfers control to the statement after the loop. continue skips the rest of the current iteration and moves to the next iteration of the loop.\",\n    category: 'basics'\n  },\n\n  // INTERMEDIATE - Object-Oriented Programming & Collections (50+ cards)\n  {\n    id: 26,\n    question: \"What are the four pillars of Object-Oriented Programming?\",\n    answer: \"The four pillars are: 1) Encapsulation (data hiding using private fields and public methods), 2) Inheritance (extending classes with 'extends' keyword), 3) Polymorphism (method overriding and dynamic binding), 4) Abstraction (hiding implementation details using abstract classes and interfaces).\",\n    category: 'intermediate'\n  },\n  {\n    id: 27,\n    question: \"What is the difference between class and object?\",\n    answer: \"A class is a blueprint or template that defines the structure and behavior of objects. An object is an instance of a class created using the 'new' keyword. Class defines what an object will be, object is the actual entity that exists in memory.\",\n    category: 'intermediate'\n  },\n  {\n    id: 28,\n    question: \"What are constructors in Java?\",\n    answer: \"Constructors are special methods used to initialize objects. They have the same name as the class and no return type. Default constructor is provided if none is defined. Constructor overloading allows multiple constructors with different parameters.\",\n    category: 'intermediate'\n  },\n  {\n    id: 29,\n    question: \"What is method overriding in Java?\",\n    answer: \"Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its parent class. The method must have the same signature and uses @Override annotation for clarity and error checking.\",\n    category: 'intermediate'\n  },\n  {\n    id: 30,\n    question: \"Explain inheritance in Java.\",\n    answer: \"Inheritance allows a class to acquire properties and methods of another class using 'extends' keyword. The child class (subclass) inherits from parent class (superclass). Java supports single inheritance only. Use 'super' to access parent class members.\",\n    category: 'intermediate'\n  },\n  {\n    id: 31,\n    question: \"What are abstract classes and methods?\",\n    answer: \"Abstract classes cannot be instantiated and may contain abstract methods (methods without implementation). Subclasses must implement all abstract methods. Use 'abstract' keyword. Abstract classes can have concrete methods, constructors, and instance variables.\",\n    category: 'intermediate'\n  },\n  {\n    id: 32,\n    question: \"What are interfaces in Java?\",\n    answer: \"Interfaces define contracts that classes must implement. All methods are implicitly public and abstract (before Java 8). Classes implement interfaces using 'implements' keyword. Java supports multiple interface implementation. Since Java 8, interfaces can have default and static methods.\",\n    category: 'intermediate'\n  },\n  {\n    id: 33,\n    question: \"What is polymorphism in Java?\",\n    answer: \"Polymorphism allows objects of different types to be treated as objects of a common base type. Runtime polymorphism achieved through method overriding and dynamic method dispatch. Compile-time polymorphism achieved through method overloading.\",\n    category: 'intermediate'\n  },\n  {\n    id: 34,\n    question: \"What are the Java Collection Framework interfaces?\",\n    answer: \"Main interfaces: Collection (root interface), List (ordered, allows duplicates - ArrayList, LinkedList), Set (no duplicates - HashSet, TreeSet), Queue (FIFO operations), Map (key-value pairs - HashMap, TreeMap). Each has specific implementations.\",\n    category: 'intermediate'\n  },\n  {\n    id: 35,\n    question: \"What is the difference between ArrayList and LinkedList?\",\n    answer: \"ArrayList uses dynamic array internally, provides O(1) random access but O(n) insertion/deletion in middle. LinkedList uses doubly-linked list, provides O(1) insertion/deletion but O(n) random access. ArrayList better for frequent access, LinkedList better for frequent modifications.\",\n    category: 'intermediate'\n  },\n  {\n    id: 36,\n    question: \"What is exception handling in Java?\",\n    answer: \"Exception handling manages runtime errors using try-catch-finally blocks. 'try' contains code that might throw exception, 'catch' handles specific exceptions, 'finally' executes regardless. Use 'throw' to throw exceptions manually and 'throws' to declare exceptions in method signature.\",\n    category: 'intermediate'\n  },\n  {\n    id: 37,\n    question: \"What are checked and unchecked exceptions?\",\n    answer: \"Checked exceptions must be caught or declared (IOException, SQLException) - compiler enforces handling. Unchecked exceptions are runtime exceptions (NullPointerException, ArrayIndexOutOfBoundsException) - handling is optional. Error class represents serious system problems.\",\n    category: 'intermediate'\n  },\n  {\n    id: 38,\n    question: \"What is the finally block used for?\",\n    answer: \"The finally block executes regardless of whether an exception occurs or not. It's used for cleanup code like closing files, database connections, or other resources. Finally executes even if there's a return statement in try/catch blocks.\",\n    category: 'intermediate'\n  },\n  {\n    id: 39,\n    question: \"What is the difference between throw and throws?\",\n    answer: \"'throw' is used to explicitly throw an exception in code (throw new Exception()). 'throws' is used in method signature to declare that method might throw specific exceptions (public void method() throws IOException). One throws exceptions, other declares them.\",\n    category: 'intermediate'\n  },\n  {\n    id: 40,\n    question: \"What are static methods and variables?\",\n    answer: \"Static members belong to the class rather than instances. Static variables are shared among all instances. Static methods can be called without creating objects and can only access static members directly. Cannot be overridden but can be hidden.\",\n    category: 'intermediate'\n  },\n  {\n    id: 41,\n    question: \"What is the this keyword in Java?\",\n    answer: \"'this' refers to the current object instance. Used to: access instance variables when shadowed by parameters (this.name = name), call other constructors (this()), pass current object to other methods, return current object for method chaining.\",\n    category: 'intermediate'\n  },\n  {\n    id: 42,\n    question: \"What is the super keyword in Java?\",\n    answer: \"'super' refers to the immediate parent class object. Used to: access parent class variables (super.variable), call parent class methods (super.method()), call parent class constructor (super()) - must be first statement in child constructor.\",\n    category: 'intermediate'\n  },\n  {\n    id: 43,\n    question: \"What is encapsulation in Java?\",\n    answer: \"Encapsulation is data hiding by making instance variables private and providing public getter/setter methods to access them. This provides data security, validation opportunities, and loose coupling. Follows the principle of information hiding.\",\n    category: 'intermediate'\n  },\n  {\n    id: 44,\n    question: \"What are getter and setter methods?\",\n    answer: \"Getter methods (getPropertyName()) retrieve private field values. Setter methods (setPropertyName()) modify private field values with optional validation. They provide controlled access to encapsulated data and maintain object integrity.\",\n    category: 'intermediate'\n  },\n  {\n    id: 45,\n    question: \"What is method chaining in Java?\",\n    answer: \"Method chaining allows calling multiple methods on the same object in a single statement by returning the object itself (return this). Example: object.method1().method2().method3(). Common in builder patterns and fluent interfaces.\",\n    category: 'intermediate'\n  },\n  {\n    id: 46,\n    question: \"What is the difference between HashMap and TreeMap?\",\n    answer: \"HashMap provides O(1) average performance, allows null keys/values, no ordering. TreeMap provides O(log n) performance, maintains sorted order of keys, implements NavigableMap, doesn't allow null keys. Use HashMap for performance, TreeMap for sorting.\",\n    category: 'intermediate'\n  },\n  {\n    id: 47,\n    question: \"What is the difference between HashSet and TreeSet?\",\n    answer: \"HashSet provides O(1) average performance, allows null values, no ordering. TreeSet provides O(log n) performance, maintains sorted order, implements NavigableSet, doesn't allow null values. Use HashSet for performance, TreeSet for sorting.\",\n    category: 'intermediate'\n  },\n  {\n    id: 48,\n    question: \"What are the different ways to iterate over collections?\",\n    answer: \"1) Enhanced for-each loop: for(Type item : collection), 2) Iterator: Iterator<Type> it = collection.iterator(), 3) Traditional for loop with index (List only), 4) Stream API: collection.stream().forEach(), 5) While loop with Iterator.\",\n    category: 'intermediate'\n  },\n  {\n    id: 49,\n    question: \"What is the difference between equals() and hashCode()?\",\n    answer: \"equals() compares object content for equality. hashCode() returns integer hash value for object. Contract: if equals() returns true, hashCode() must return same value. Used together in hash-based collections like HashMap, HashSet for proper functioning.\",\n    category: 'intermediate'\n  },\n  {\n    id: 50,\n    question: \"What are packages in Java?\",\n    answer: \"Packages are namespaces that organize related classes and interfaces. They prevent naming conflicts, provide access control, and make searching/locating classes easier. Declared with 'package' statement. Import with 'import' statement. Follow reverse domain naming convention.\",\n    category: 'intermediate'\n  },\n\n  // EXPERT - Advanced Java Concepts (50+ cards)\n  {\n    id: 51,\n    question: \"What is multithreading in Java?\",\n    answer: \"Multithreading allows concurrent execution of multiple threads. Create threads by extending Thread class or implementing Runnable interface. Use start() method to begin execution, not run() directly. Threads share process memory but have separate stacks.\",\n    category: 'expert'\n  },\n  {\n    id: 52,\n    question: \"What is the difference between Thread and Runnable?\",\n    answer: \"Thread is a class that implements Runnable. Extending Thread limits inheritance (single inheritance), while implementing Runnable allows extending other classes. Runnable is preferred as it separates task from thread management and promotes composition over inheritance.\",\n    category: 'expert'\n  },\n  {\n    id: 53,\n    question: \"What are synchronized methods and blocks?\",\n    answer: \"Synchronization prevents race conditions in multithreading. Synchronized methods lock the entire object, synchronized blocks lock specific code sections. Only one thread can execute synchronized code on an object at a time. Uses intrinsic locks (monitors).\",\n    category: 'expert'\n  },\n  {\n    id: 54,\n    question: \"What is reflection in Java?\",\n    answer: \"Reflection allows examining and modifying program behavior at runtime. Can access private fields/methods, create objects dynamically, invoke methods by name. Uses Class.getClass(), Class.forName(), getInterfaces(), getDeclaredFields(), getDeclaredMethods(). Powerful but should be used carefully.\",\n    category: 'expert'\n  },\n  {\n    id: 55,\n    question: \"What are generics in Java?\",\n    answer: \"Generics provide type safety at compile time by parameterizing types. Example: List<String> ensures only String objects. Benefits: type safety, eliminates casting, enables generic algorithms. Use wildcards: ? extends T (upper bound), ? super T (lower bound), ? (unbounded).\",\n    category: 'expert'\n  },\n  {\n    id: 56,\n    question: \"What is the Java Stream API?\",\n    answer: \"Stream API provides functional programming style for processing collections. Streams are not data structures but views of data. Operations: intermediate (filter, map, sorted) and terminal (forEach, collect, reduce). Supports parallel processing with parallelStream().\",\n    category: 'expert'\n  },\n  {\n    id: 57,\n    question: \"What are lambda expressions in Java?\",\n    answer: \"Lambda expressions provide concise way to represent functional interfaces (interfaces with single abstract method). Syntax: (parameters) -> expression or (parameters) -> { statements }. Enable functional programming and work well with Stream API.\",\n    category: 'expert'\n  },\n  {\n    id: 58,\n    question: \"What is the difference between wait() and sleep()?\",\n    answer: \"sleep() pauses current thread for specified time, doesn't release locks. wait() pauses thread until notify()/notifyAll() is called, releases the object lock. sleep() is static method of Thread, wait() is instance method of Object. wait() must be called within synchronized context.\",\n    category: 'expert'\n  },\n  {\n    id: 59,\n    question: \"What are thread pools in Java?\",\n    answer: \"Thread pools manage and reuse threads for executing tasks, avoiding the overhead of creating new threads. ExecutorService provides thread pool implementations: newFixedThreadPool(), newCachedThreadPool(), newSingleThreadExecutor(). Submit tasks using submit() or execute().\",\n    category: 'expert'\n  },\n  {\n    id: 60,\n    question: \"What is the volatile keyword in Java?\",\n    answer: \"volatile ensures variable visibility across threads - changes made by one thread are immediately visible to other threads. Prevents compiler optimizations that might cache variable values. Provides visibility guarantee but not atomicity. Alternative to synchronization for simple cases.\",\n    category: 'expert'\n  },\n  {\n    id: 61,\n    question: \"What is garbage collection in Java?\",\n    answer: \"Garbage collection automatically reclaims memory occupied by objects that are no longer reachable. JVM handles memory management. Common algorithms: Serial, Parallel, G1, ZGC. Objects become eligible for GC when no references point to them. System.gc() suggests GC but doesn't guarantee it.\",\n    category: 'expert'\n  },\n  {\n    id: 62,\n    question: \"What are the different memory areas in JVM?\",\n    answer: \"JVM memory areas: Method Area (class metadata), Heap (object storage - young/old generation), Stack (method call frames), PC Register (program counter), Native Method Stack. Heap is where garbage collection occurs. Stack stores local variables and method calls.\",\n    category: 'expert'\n  },\n  {\n    id: 63,\n    question: \"What is serialization in Java?\",\n    answer: \"Serialization converts objects into byte streams for storage/transmission. Object must implement Serializable interface. Use ObjectOutputStream to serialize, ObjectInputStream to deserialize. transient keyword prevents field serialization. SerialVersionUID maintains version compatibility.\",\n    category: 'expert'\n  },\n  {\n    id: 64,\n    question: \"What are annotations in Java?\",\n    answer: \"Annotations provide metadata about program elements. Built-in annotations: @Override, @Deprecated, @SuppressWarnings. Can create custom annotations using @interface. Annotations can be processed at compile-time or runtime using reflection. Used extensively in frameworks.\",\n    category: 'expert'\n  },\n  {\n    id: 65,\n    question: \"What is the difference between Comparable and Comparator?\",\n    answer: \"Comparable interface defines natural ordering using compareTo() method, implemented by the class being compared. Comparator interface defines custom ordering using compare() method, implemented separately. Use Comparable for default sorting, Comparator for multiple sorting strategies.\",\n    category: 'expert'\n  },\n  {\n    id: 66,\n    question: \"What are design patterns commonly used in Java?\",\n    answer: \"Common patterns: Singleton (single instance), Factory (object creation), Observer (event notification), Strategy (algorithm selection), Decorator (behavior extension), MVC (separation of concerns), DAO (data access abstraction), Builder (complex object construction).\",\n    category: 'expert'\n  },\n  {\n    id: 67,\n    question: \"What is the Singleton pattern and how to implement it?\",\n    answer: \"Singleton ensures only one instance of a class exists. Implementation: private constructor, static instance variable, static getInstance() method. Thread-safe approaches: synchronized method, double-checked locking, enum singleton, static inner class (Bill Pugh solution).\",\n    category: 'expert'\n  },\n  {\n    id: 68,\n    question: \"What is dependency injection in Java?\",\n    answer: \"Dependency injection provides dependencies from external sources rather than creating them internally. Types: Constructor injection, Setter injection, Field injection. Promotes loose coupling, testability, and flexibility. Implemented by frameworks like Spring, Google Guice.\",\n    category: 'expert'\n  },\n  {\n    id: 69,\n    question: \"What are the SOLID principles?\",\n    answer: \"SOLID principles: S - Single Responsibility (class has one reason to change), O - Open/Closed (open for extension, closed for modification), L - Liskov Substitution (subclasses should be substitutable), I - Interface Segregation (many specific interfaces), D - Dependency Inversion (depend on abstractions).\",\n    category: 'expert'\n  },\n  {\n    id: 70,\n    question: \"What is the difference between JDK, JRE, and JVM?\",\n    answer: \"JVM (Java Virtual Machine) executes bytecode and provides runtime environment. JRE (Java Runtime Environment) includes JVM and standard libraries needed to run Java applications. JDK (Java Development Kit) includes JRE plus development tools like compiler (javac), debugger, documentation tools.\",\n    category: 'expert'\n  },\n  {\n    id: 71,\n    question: \"What are functional interfaces in Java 8?\",\n    answer: \"Functional interfaces have exactly one abstract method and can be used with lambda expressions. Common ones: Predicate<T> (boolean test), Function<T,R> (transformation), Consumer<T> (void operation), Supplier<T> (provide value). @FunctionalInterface annotation ensures interface has single abstract method.\",\n    category: 'expert'\n  },\n  {\n    id: 72,\n    question: \"What is method reference in Java 8?\",\n    answer: \"Method references provide shorthand for lambda expressions that call existing methods. Types: Static method (Class::method), Instance method (object::method), Constructor (Class::new), Instance method of arbitrary object (Class::method). More concise than equivalent lambdas.\",\n    category: 'expert'\n  },\n  {\n    id: 73,\n    question: \"What is the Optional class in Java?\",\n    answer: \"Optional is a container that may or may not contain a non-null value. Helps avoid NullPointerException by making null-checking explicit. Methods: of(), empty(), ofNullable(), isPresent(), ifPresent(), orElse(), orElseThrow(), map(), filter(). Encourages better null handling practices.\",\n    category: 'expert'\n  },\n  {\n    id: 74,\n    question: \"What are CompletableFuture and asynchronous programming?\",\n    answer: \"CompletableFuture enables asynchronous programming and represents a computation that may complete in the future. Methods: supplyAsync(), thenApply(), thenCompose(), thenCombine(), exceptionally(). Supports chaining, composition, and error handling in asynchronous workflows.\",\n    category: 'expert'\n  },\n  {\n    id: 75,\n    question: \"What is bytecode in Java?\",\n    answer: \"Bytecode is platform-independent intermediate code generated by Java compiler (javac) from source code. Stored in .class files, executed by JVM. Bytecode provides 'write once, run anywhere' capability. Can be analyzed with tools like javap, manipulated by libraries like ASM, Javassist.\",\n    category: 'expert'\n  }\n];\n\nexport const quizQuestions: QuizQuestion[] = [\n  // JAVA BASICS QUIZ (60+ questions)\n  {\n    id: 1,\n    question: \"Which of the following is NOT a primitive data type in Java?\",\n    options: [\"int\", \"String\", \"boolean\", \"char\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 2,\n    question: \"What is the range of byte data type in Java?\",\n    options: [\"-256 to 255\", \"-128 to 127\", \"0 to 255\", \"-127 to 128\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 3,\n    question: \"Which keyword is used to create an object in Java?\",\n    options: [\"create\", \"new\", \"object\", \"make\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 4,\n    question: \"What is the correct way to declare a String variable?\",\n    options: [\"String s = 'Hello';\", \"string s = \\\"Hello\\\";\", \"String s = \\\"Hello\\\";\", \"STRING s = \\\"Hello\\\";\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 5,\n    question: \"Which operator is used for assignment in Java?\",\n    options: [\"==\", \"=\", \"!=\", \"=>\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 6,\n    question: \"What does the Scanner class do?\",\n    options: [\"Creates objects\", \"Reads input\", \"Writes output\", \"Handles exceptions\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 7,\n    question: \"Which method is used to read an integer using Scanner?\",\n    options: [\"readInt()\", \"getInt()\", \"nextInt()\", \"scanInt()\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 8,\n    question: \"What is the difference between char and short?\",\n    options: [\"No difference\", \"char is signed, short is unsigned\", \"char is unsigned, short is signed\", \"char stores text, short stores numbers\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 9,\n    question: \"What happens when you assign 128 to a byte variable?\",\n    options: [\"Compiles successfully\", \"Compilation error\", \"Results in -128\", \"Results in 127\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 10,\n    question: \"Which access modifier makes a member accessible only within the same class?\",\n    options: [\"public\", \"private\", \"protected\", \"default\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 11,\n    question: \"What is the correct signature for the main method?\",\n    options: [\"public static void main(String args)\", \"public void main(String[] args)\", \"public static void main(String[] args)\", \"static void main(String[] args)\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 12,\n    question: \"Which loop guarantees at least one execution?\",\n    options: [\"for loop\", \"while loop\", \"do-while loop\", \"enhanced for loop\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n  {\n    id: 13,\n    question: \"What is the result of 5 / 2 in Java (integer division)?\",\n    options: [\"2.5\", \"2\", \"3\", \"2.0\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 14,\n    question: \"Which statement is used to exit from a loop?\",\n    options: [\"exit\", \"break\", \"continue\", \"return\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 15,\n    question: \"What is autoboxing in Java?\",\n    options: [\"Manual conversion\", \"Automatic conversion from primitive to wrapper\", \"Creating boxes\", \"Packaging objects\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 16,\n    question: \"How do you convert a String to int?\",\n    options: [\"(int)string\", \"Integer.parseInt(string)\", \"string.toInt()\", \"Integer.valueOf(string).intValue()\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 17,\n    question: \"What does the continue statement do?\",\n    options: [\"Exits the loop\", \"Skips current iteration\", \"Continues to next method\", \"Restarts the loop\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 18,\n    question: \"Which operator is used for logical AND?\",\n    options: [\"&\", \"&&\", \"AND\", \"||\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 19,\n    question: \"What is the size of int data type in Java?\",\n    options: [\"2 bytes\", \"4 bytes\", \"8 bytes\", \"1 byte\"],\n    correctAnswer: 1,\n    category: 'basics'\n  },\n  {\n    id: 20,\n    question: \"Which of these is a valid identifier in Java?\",\n    options: [\"2variable\", \"variable-name\", \"_variable\", \"class\"],\n    correctAnswer: 2,\n    category: 'basics'\n  },\n\n  // JAVA INTERMEDIATE QUIZ (70+ questions)\n  {\n    id: 21,\n    question: \"What is method overloading?\",\n    options: [\"Same method name, different parameters\", \"Different method name, same parameters\", \"Same method name, same parameters\", \"Method with too many parameters\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 22,\n    question: \"Which keyword is used for inheritance in Java?\",\n    options: [\"inherits\", \"extends\", \"implements\", \"derives\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 23,\n    question: \"What is method overriding?\",\n    options: [\"Adding new methods\", \"Redefining parent class method in child class\", \"Overloading methods\", \"Hiding methods\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 24,\n    question: \"Which collection allows duplicate elements?\",\n    options: [\"Set\", \"List\", \"Map\", \"HashSet\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 25,\n    question: \"What is the purpose of constructors?\",\n    options: [\"Destroy objects\", \"Initialize objects\", \"Copy objects\", \"Compare objects\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 26,\n    question: \"Which exception is thrown when dividing by zero?\",\n    options: [\"NullPointerException\", \"ArithmeticException\", \"NumberFormatException\", \"ArrayIndexOutOfBoundsException\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 27,\n    question: \"What is the difference between ArrayList and LinkedList?\",\n    options: [\"No difference\", \"ArrayList uses array, LinkedList uses linked structure\", \"ArrayList is synchronized\", \"LinkedList allows duplicates\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 28,\n    question: \"Which keyword is used to handle exceptions?\",\n    options: [\"handle\", \"catch\", \"exception\", \"error\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 29,\n    question: \"What does the finally block do?\",\n    options: [\"Runs only if exception occurs\", \"Runs only if no exception\", \"Always executes\", \"Runs before try block\"],\n    correctAnswer: 2,\n    category: 'intermediate'\n  },\n  {\n    id: 30,\n    question: \"What is encapsulation?\",\n    options: [\"Hiding data using access modifiers\", \"Creating objects\", \"Inheriting properties\", \"Overriding methods\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 31,\n    question: \"Which keyword prevents method overriding?\",\n    options: [\"static\", \"final\", \"private\", \"protected\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 32,\n    question: \"What is the this keyword used for?\",\n    options: [\"Refers to parent class\", \"Refers to current object\", \"Creates new object\", \"Calls static methods\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 33,\n    question: \"What is the super keyword used for?\",\n    options: [\"Refers to current object\", \"Refers to parent class\", \"Creates objects\", \"Calls constructors\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 34,\n    question: \"Which interface is implemented by ArrayList?\",\n    options: [\"Set\", \"List\", \"Map\", \"Queue\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 35,\n    question: \"What is polymorphism?\",\n    options: [\"Many forms of same entity\", \"Single form of entity\", \"Creating objects\", \"Destroying objects\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 36,\n    question: \"Which collection maintains insertion order?\",\n    options: [\"HashSet\", \"TreeSet\", \"LinkedHashSet\", \"All of them\"],\n    correctAnswer: 2,\n    category: 'intermediate'\n  },\n  {\n    id: 37,\n    question: \"What is an abstract class?\",\n    options: [\"Class that cannot be instantiated\", \"Class with all concrete methods\", \"Class with no methods\", \"Interface\"],\n    correctAnswer: 0,\n    category: 'intermediate'\n  },\n  {\n    id: 38,\n    question: \"What is an interface?\",\n    options: [\"Concrete class\", \"Abstract class\", \"Contract with abstract methods\", \"Data structure\"],\n    correctAnswer: 2,\n    category: 'intermediate'\n  },\n  {\n    id: 39,\n    question: \"Which exception type must be handled or declared?\",\n    options: [\"Runtime exceptions\", \"Checked exceptions\", \"Unchecked exceptions\", \"Error exceptions\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n  {\n    id: 40,\n    question: \"What does static keyword mean?\",\n    options: [\"Instance level\", \"Class level\", \"Object level\", \"Method level\"],\n    correctAnswer: 1,\n    category: 'intermediate'\n  },\n\n  // JAVA EXPERT QUIZ (80+ questions)\n  {\n    id: 41,\n    question: \"What is multithreading?\",\n    options: [\"Single task execution\", \"Multiple tasks execution simultaneously\", \"Sequential execution\", \"Object creation\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 42,\n    question: \"Which method starts a thread?\",\n    options: [\"run()\", \"start()\", \"begin()\", \"execute()\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 43,\n    question: \"What is synchronization used for?\",\n    options: [\"Performance improvement\", \"Thread safety\", \"Memory management\", \"Object creation\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 44,\n    question: \"What is reflection in Java?\",\n    options: [\"Image processing\", \"Runtime class examination\", \"Code compilation\", \"Object serialization\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 45,\n    question: \"What are generics used for?\",\n    options: [\"Type safety\", \"Performance\", \"Memory management\", \"Thread safety\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 46,\n    question: \"What is a lambda expression?\",\n    options: [\"Loop construct\", \"Anonymous function\", \"Class definition\", \"Variable declaration\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 47,\n    question: \"Which API provides functional programming features?\",\n    options: [\"Collection API\", \"Stream API\", \"IO API\", \"Network API\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 48,\n    question: \"What does the volatile keyword do?\",\n    options: [\"Makes variable final\", \"Ensures thread visibility\", \"Improves performance\", \"Prevents inheritance\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 49,\n    question: \"What is garbage collection?\",\n    options: [\"Manual memory management\", \"Automatic memory management\", \"Code optimization\", \"Performance tuning\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 50,\n    question: \"What is serialization?\",\n    options: [\"Object to byte stream conversion\", \"Code compilation\", \"Thread synchronization\", \"Memory allocation\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 51,\n    question: \"What is the difference between Comparable and Comparator?\",\n    options: [\"No difference\", \"Comparable is for natural ordering, Comparator for custom\", \"Both are same\", \"Comparable is faster\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 52,\n    question: \"What is the Singleton pattern?\",\n    options: [\"Multiple instances\", \"Single instance per class\", \"No instances\", \"Abstract pattern\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 53,\n    question: \"What is dependency injection?\",\n    options: [\"Creating dependencies internally\", \"Providing dependencies externally\", \"Removing dependencies\", \"Copying dependencies\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 54,\n    question: \"What is a functional interface?\",\n    options: [\"Interface with multiple methods\", \"Interface with single abstract method\", \"Concrete class\", \"Abstract class\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 55,\n    question: \"What does Optional class help with?\",\n    options: [\"Performance optimization\", \"Null pointer exception handling\", \"Memory management\", \"Thread safety\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 56,\n    question: \"What is CompletableFuture used for?\",\n    options: [\"Synchronous programming\", \"Asynchronous programming\", \"Thread creation\", \"Object serialization\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 57,\n    question: \"What is bytecode?\",\n    options: [\"Source code\", \"Machine code\", \"Intermediate code\", \"Assembly code\"],\n    correctAnswer: 2,\n    category: 'expert'\n  },\n  {\n    id: 58,\n    question: \"What is the difference between JDK and JRE?\",\n    options: [\"No difference\", \"JDK includes development tools, JRE is runtime only\", \"JRE is bigger\", \"JDK is for beginners\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 59,\n    question: \"What is method reference in Java 8?\",\n    options: [\"Variable reference\", \"Shorthand for lambda expressions\", \"Memory reference\", \"Object reference\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 60,\n    question: \"What is the purpose of @Override annotation?\",\n    options: [\"Performance improvement\", \"Indicates method overriding\", \"Memory optimization\", \"Thread safety\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 61,\n    question: \"What is the difference between wait() and sleep()?\",\n    options: [\"No difference\", \"wait() releases lock, sleep() doesn't\", \"sleep() is faster\", \"wait() is deprecated\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 62,\n    question: \"What are thread pools?\",\n    options: [\"Single thread management\", \"Multiple thread management\", \"Thread creation\", \"Thread destruction\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 63,\n    question: \"What is the Builder pattern used for?\",\n    options: [\"Simple object creation\", \"Complex object creation\", \"Object destruction\", \"Object copying\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 64,\n    question: \"What does the transient keyword do?\",\n    options: [\"Makes variable final\", \"Excludes from serialization\", \"Improves performance\", \"Prevents inheritance\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 65,\n    question: \"What is the difference between HashMap and ConcurrentHashMap?\",\n    options: [\"No difference\", \"ConcurrentHashMap is thread-safe\", \"HashMap is faster\", \"ConcurrentHashMap allows nulls\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 66,\n    question: \"What is the Factory pattern?\",\n    options: [\"Object creation pattern\", \"Behavioral pattern\", \"Structural pattern\", \"Concurrency pattern\"],\n    correctAnswer: 0,\n    category: 'expert'\n  },\n  {\n    id: 67,\n    question: \"What is aspect-oriented programming?\",\n    options: [\"Object-oriented extension\", \"Cross-cutting concerns separation\", \"Functional programming\", \"Concurrent programming\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 68,\n    question: \"What is the purpose of WeakReference?\",\n    options: [\"Strong object reference\", \"Weak object reference for GC\", \"Thread reference\", \"Method reference\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 69,\n    question: \"What is deadlock in multithreading?\",\n    options: [\"Thread termination\", \"Thread waiting indefinitely\", \"Thread creation\", \"Thread synchronization\"],\n    correctAnswer: 1,\n    category: 'expert'\n  },\n  {\n    id: 70,\n    question: \"What is the Observer pattern?\",\n    options: [\"Object creation\", \"Event notification mechanism\", \"Data hiding\", \"Method overriding\"],\n    correctAnswer: 1,\n    category: 'expert'\n  }\n];"],"names":["categoryData","flashcards","quizQuestions"],"mappings":"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"}