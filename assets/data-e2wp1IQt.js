const e={basics:{name:"Kubernetes Basics",description:"Pods, Services, basic concepts, and fundamental container orchestration",color:"#326CE5"},intermediate:{name:"Kubernetes Intermediate",description:"Deployments, ReplicaSets, ConfigMaps, Secrets, and workload management",color:"#2557C5"},expert:{name:"Kubernetes Expert",description:"Advanced networking, security, operators, and production best practices",color:"#1E48A5"}},t=[{id:1,category:"basics",question:"What is Kubernetes?",answer:"Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It groups containers into logical units called pods and provides features like service discovery, load balancing, and automated rollouts."},{id:2,category:"basics",question:"What is a Pod in Kubernetes?",answer:"A Pod is the smallest deployable unit in Kubernetes. It represents one or more tightly coupled containers that share the same network namespace, storage volumes, and lifecycle. Pods are ephemeral and typically contain just one container, though they can host multiple containers that need to work closely together."},{id:3,category:"basics",question:"What is a Kubernetes Service?",answer:"A Service is an abstraction that defines a logical set of Pods and provides a stable network endpoint to access them. Services handle load balancing, service discovery, and provide consistent access to Pods even as they are created and destroyed. Common types include ClusterIP, NodePort, and LoadBalancer."},{id:4,category:"basics",question:"What is the role of kubectl?",answer:"kubectl is the command-line interface for interacting with Kubernetes clusters. It allows users to deploy applications, inspect cluster resources, view logs, and manage cluster operations. kubectl communicates with the Kubernetes API server to execute commands and retrieve information about cluster state."},{id:5,category:"basics",question:"What is a Kubernetes Node?",answer:"A Node is a worker machine in a Kubernetes cluster that runs containerized applications. Each node contains the necessary components to run Pods, including the kubelet (node agent), kube-proxy (network proxy), and a container runtime like Docker or containerd."},{id:6,category:"basics",question:"What is the Kubernetes Control Plane?",answer:"The Control Plane manages the Kubernetes cluster and makes decisions about the cluster state. It includes the API server (cluster gateway), etcd (distributed key-value store), scheduler (assigns Pods to Nodes), and controller manager (runs controllers that regulate cluster state)."},{id:7,category:"basics",question:"What is a Kubernetes Namespace?",answer:"A Namespace provides a way to divide cluster resources between multiple users or applications. It creates virtual clusters within a physical cluster, allowing resource isolation and organization. Common namespaces include default, kube-system, and kube-public."},{id:8,category:"basics",question:"What is a Kubernetes Label?",answer:"Labels are key-value pairs attached to Kubernetes objects like Pods and Services. They are used to identify, select, and organize resources. Labels enable grouping resources and are commonly used by Services to select which Pods to route traffic to."},{id:9,category:"basics",question:"What is a Kubernetes Selector?",answer:"A Selector is used to identify and select a set of resources based on their labels. Services use selectors to determine which Pods should receive traffic. Label selectors can be equality-based (=, !=) or set-based (in, notin, exists)."},{id:10,category:"basics",question:"What are the main Kubernetes API versions?",answer:"Kubernetes uses API versioning to manage resource definitions. Common versions include: v1 (stable core resources like Pods, Services), apps/v1 (application resources like Deployments), batch/v1 (batch jobs), and networking.k8s.io/v1 (network policies)."},{id:11,category:"basics",question:"What is the difference between a Pod and a Container?",answer:"A Container is a single application process running in isolation with its own filesystem and network. A Pod is a Kubernetes wrapper around one or more containers that share the same network IP, storage volumes, and lifecycle. Pods provide shared context for containers to communicate."},{id:12,category:"basics",question:"What are Kubernetes Annotations?",answer:"Annotations are key-value pairs that store non-identifying metadata about Kubernetes objects. Unlike labels, annotations cannot be used to select objects but can store arbitrary information like timestamps, commit IDs, or configuration details for tools and libraries."},{id:13,category:"basics",question:"What is a ClusterIP Service?",answer:"ClusterIP is the default Kubernetes Service type that exposes the Service on an internal cluster IP address. This makes the Service reachable only from within the cluster. It provides internal load balancing and service discovery for applications running inside the cluster."},{id:14,category:"basics",question:"What is a NodePort Service?",answer:"NodePort is a Kubernetes Service type that exposes the Service on a static port on each Node's IP address. This allows external traffic to reach the Service by accessing <NodeIP>:<NodePort>. It automatically creates a ClusterIP Service and routes external traffic to it."},{id:15,category:"basics",question:"What is a LoadBalancer Service?",answer:"LoadBalancer is a Kubernetes Service type that exposes the Service externally using a cloud provider's load balancer. It creates a NodePort and ClusterIP Service internally, then provisions an external load balancer to route traffic to the NodePort on all nodes."},{id:16,category:"basics",question:"What is kubelet?",answer:"kubelet is the primary node agent that runs on each Kubernetes node. It manages the lifecycle of Pods assigned to its node, ensuring containers are running and healthy. kubelet communicates with the API server and reports node and Pod status back to the control plane."},{id:17,category:"basics",question:"What is kube-proxy?",answer:"kube-proxy is a network proxy that runs on each node in the cluster. It implements Service networking by maintaining network rules that allow communication to Pods from inside or outside the cluster. It handles load balancing for Services and implements Service discovery."},{id:18,category:"basics",question:"What is etcd in Kubernetes?",answer:"etcd is a distributed key-value store that serves as Kubernetes' backing store for all cluster data. It stores the cluster state, configuration, and metadata. etcd is critical for cluster operation - if etcd is unavailable, the cluster cannot function, making backups essential."},{id:19,category:"basics",question:"What is the Kubernetes API Server?",answer:"The API Server is the central component of the Kubernetes control plane that exposes the Kubernetes API. All cluster interactions go through the API server, which validates and processes REST operations, updates etcd, and serves as the gateway for all cluster communication."},{id:20,category:"basics",question:"What is the Kubernetes Scheduler?",answer:"The Scheduler is a control plane component that watches for newly created Pods with no assigned node and selects a node for them to run on. It considers factors like resource requirements, hardware constraints, affinity rules, and data locality when making scheduling decisions."},{id:21,category:"basics",question:"What are Kubernetes Controllers?",answer:"Controllers are control plane components that watch the cluster state and make changes to move the current state toward the desired state. Examples include the Deployment controller, ReplicaSet controller, and Job controller. They implement the reconciliation loop pattern."},{id:22,category:"basics",question:"What is a Kubernetes Manifest?",answer:"A Manifest is a YAML or JSON file that describes the desired state of Kubernetes resources. It includes the API version, kind of resource, metadata (like name and labels), and spec (desired state). Manifests are applied using kubectl to create or update resources."},{id:23,category:"basics",question:"What is the purpose of container ports in Kubernetes?",answer:"Container ports specify which network ports a container listens on. In Kubernetes Pod specs, containerPort is used for documentation and tooling - it doesn't actually open the port. The main purpose is to provide information about which ports the container application uses."},{id:24,category:"basics",question:"What is the difference between targetPort and port in a Service?",answer:"In a Kubernetes Service, 'port' is the port that the Service exposes to other cluster resources, while 'targetPort' is the port on the Pod/container that traffic should be forwarded to. Multiple Services can expose different ports but target the same container port."},{id:25,category:"basics",question:"What happens when a Pod is deleted in Kubernetes?",answer:"When a Pod is deleted, Kubernetes sends a TERM signal to all containers, waits for a grace period (default 30 seconds), then sends a KILL signal to force termination. The Pod IP is removed from Service endpoints, and any volumes are unmounted. Controllers may create replacement Pods if needed."},{id:26,category:"intermediate",question:"What is a Kubernetes Deployment?",answer:"A Deployment provides declarative updates for Pods and ReplicaSets. It manages stateless applications by ensuring the desired number of Pod replicas are running, handles rolling updates, rollbacks, and scaling. Deployments create and manage ReplicaSets, which in turn manage Pods."},{id:27,category:"intermediate",question:"What is a ReplicaSet?",answer:"A ReplicaSet ensures that a specified number of Pod replicas are running at any given time. It uses label selectors to identify which Pods it manages and creates or deletes Pods as needed to maintain the desired replica count. Deployments typically manage ReplicaSets."},{id:28,category:"intermediate",question:"What is a Kubernetes ConfigMap?",answer:"A ConfigMap stores non-confidential configuration data in key-value pairs. It allows you to decouple configuration from application code, making applications more portable. ConfigMaps can be consumed by Pods as environment variables, command-line arguments, or configuration files in volumes."},{id:29,category:"intermediate",question:"What is a Kubernetes Secret?",answer:"A Secret stores sensitive data like passwords, OAuth tokens, and SSH keys. Similar to ConfigMaps but specifically for confidential information, Secrets are base64 encoded (not encrypted by default) and can be mounted as volumes or exposed as environment variables."},{id:30,category:"intermediate",question:"What are the different types of Kubernetes Secrets?",answer:"Kubernetes Secret types include: Opaque (default, arbitrary user data), kubernetes.io/service-account-token (service account tokens), kubernetes.io/dockercfg (Docker registry credentials), kubernetes.io/tls (TLS certificates), and kubernetes.io/ssh-auth (SSH authentication)."},{id:31,category:"intermediate",question:"What is a Kubernetes Volume?",answer:"A Volume provides persistent storage for containers in a Pod. Unlike container filesystems, volumes persist beyond container restarts. Types include emptyDir (temporary), hostPath (node filesystem), persistentVolumeClaim (persistent storage), configMap, and secret volumes."},{id:32,category:"intermediate",question:"What is a PersistentVolume (PV)?",answer:"A PersistentVolume is a cluster-wide storage resource provisioned by an administrator or dynamically using Storage Classes. PVs have lifecycles independent of Pods and provide durable storage. They can be backed by various storage systems like NFS, cloud disks, or local storage."},{id:33,category:"intermediate",question:"What is a PersistentVolumeClaim (PVC)?",answer:"A PersistentVolumeClaim is a request for storage by a user. It specifies size, access modes, and storage class requirements. PVCs bind to available PVs that meet their requirements, allowing Pods to use persistent storage without needing to know storage implementation details."},{id:34,category:"intermediate",question:"What are Kubernetes Probes?",answer:"Probes are health checks that kubelet performs on containers. Liveness probes detect when to restart containers, readiness probes determine when containers are ready to receive traffic, and startup probes provide additional time for slow-starting containers. Probes can be HTTP, TCP, or exec-based."},{id:35,category:"intermediate",question:"What is the difference between Liveness and Readiness probes?",answer:"Liveness probes determine if a container is running properly - if it fails, kubelet restarts the container. Readiness probes determine if a container is ready to serve requests - if it fails, the Pod is removed from Service endpoints but the container isn't restarted."},{id:36,category:"intermediate",question:"What are Resource Requests and Limits?",answer:"Resource Requests specify the minimum amount of CPU and memory a container needs - used by the scheduler for placement decisions. Resource Limits specify the maximum resources a container can use - enforced by kubelet. Requests enable efficient scheduling, limits prevent resource overconsumption."},{id:37,category:"intermediate",question:"What is a Kubernetes Job?",answer:"A Job creates one or more Pods and ensures that a specified number complete successfully. Jobs are useful for batch processing, one-time tasks, or parallel processing. Unlike Deployments, Jobs don't restart Pods after successful completion - they're designed for finite workloads."},{id:38,category:"intermediate",question:"What is a CronJob?",answer:"A CronJob creates Jobs on a scheduled basis using cron format. It's useful for periodic tasks like backups, report generation, or cleanup operations. CronJobs manage the lifecycle of Jobs and can be configured with concurrency policies and history limits."},{id:39,category:"intermediate",question:"What is a DaemonSet?",answer:"A DaemonSet ensures that a copy of a Pod runs on all (or selected) nodes in the cluster. It's commonly used for cluster-wide services like logging agents, monitoring agents, or network plugins. When nodes are added or removed, DaemonSets automatically adjust Pod placement."},{id:40,category:"intermediate",question:"What is a StatefulSet?",answer:"A StatefulSet manages stateful applications that require stable network identities, persistent storage, and ordered deployment/scaling. Unlike Deployments, StatefulSets provide guarantees about Pod naming, ordering, and storage persistence, making them suitable for databases and clustered applications."},{id:41,category:"intermediate",question:"What are Init Containers?",answer:"Init Containers run before application containers in a Pod and must complete successfully before the main containers start. They're used for setup tasks like downloading data, waiting for services, or performing initialization. Init containers run sequentially and have separate resource limits."},{id:42,category:"intermediate",question:"What are Node Selectors?",answer:"Node Selectors constrain Pod scheduling to nodes with specific labels. They're specified in Pod specs using key-value pairs that must match node labels. Node selectors provide simple node selection - for more complex constraints, use Node Affinity rules."},{id:43,category:"intermediate",question:"What is Node Affinity?",answer:"Node Affinity is a more flexible way to constrain Pod scheduling based on node labels. It supports 'required' rules (must match) and 'preferred' rules (best effort). Node affinity can use operators like In, NotIn, Exists, and DoesNotExist for complex selection logic."},{id:44,category:"intermediate",question:"What are Taints and Tolerations?",answer:"Taints are applied to nodes to repel Pods that don't have matching tolerations. Tolerations are applied to Pods to allow (but not require) scheduling on tainted nodes. This mechanism enables dedicated nodes for specific workloads or prevents scheduling on problematic nodes."},{id:45,category:"intermediate",question:"What is a Service Account?",answer:"A Service Account provides an identity for processes running in Pods. It's used for Pod authentication to the API server and other services. Each namespace has a default service account, and custom service accounts can be created with specific RBAC permissions for fine-grained access control."},{id:46,category:"intermediate",question:"What is RBAC in Kubernetes?",answer:"Role-Based Access Control (RBAC) regulates access to Kubernetes resources based on user roles. It uses Roles (namespace-scoped) and ClusterRoles (cluster-scoped) to define permissions, then binds them to users or service accounts using RoleBindings and ClusterRoleBindings."},{id:47,category:"intermediate",question:"What are Horizontal Pod Autoscalers (HPA)?",answer:"HPA automatically scales the number of Pods in a Deployment, ReplicaSet, or StatefulSet based on CPU utilization or custom metrics. It monitors metrics and adjusts replica count to maintain target utilization, helping applications handle varying load while optimizing resource usage."},{id:48,category:"intermediate",question:"What is a Storage Class?",answer:"A Storage Class defines different types of storage available in a cluster and enables dynamic provisioning of PersistentVolumes. It specifies the provisioner, parameters, and reclaim policy. Users can request specific storage types through PVCs without administrator intervention."},{id:49,category:"intermediate",question:"What are Kubernetes Events?",answer:"Events are objects that provide insight into cluster activity, such as scheduling decisions, resource creation, or errors. They have limited retention (usually 1 hour) and can be viewed using kubectl get events. Events help with debugging and understanding cluster behavior."},{id:50,category:"intermediate",question:"What is the difference between Rolling Update and Recreate deployment strategies?",answer:"Rolling Update (default) gradually replaces old Pods with new ones, maintaining application availability during updates. Recreate terminates all old Pods before creating new ones, causing downtime but ensuring no mixed versions run simultaneously. Rolling updates are preferred for most applications."},{id:51,category:"expert",question:"What are Kubernetes Network Policies?",answer:"Network Policies define rules for network traffic between Pods, namespaces, or external endpoints. They provide micro-segmentation at the application layer, controlling ingress and egress traffic based on labels, namespaces, and IP ranges. Network Policies require a compatible CNI plugin to function."},{id:52,category:"expert",question:"What is a Kubernetes Operator?",answer:"An Operator is a method for packaging, deploying, and managing Kubernetes applications using custom controllers and Custom Resource Definitions (CRDs). Operators encode operational knowledge for complex applications, automating tasks like installation, upgrades, backups, and failure recovery."},{id:53,category:"expert",question:"What are Custom Resource Definitions (CRDs)?",answer:"CRDs allow you to extend the Kubernetes API with custom resource types specific to your application domain. They define the structure and validation rules for custom resources, enabling you to manage application-specific objects using native Kubernetes tooling and patterns."},{id:54,category:"expert",question:"What is Pod Security Policy (deprecated) and Pod Security Standards?",answer:"Pod Security Policy (deprecated in 1.21) controlled security-sensitive aspects of Pod specifications. Pod Security Standards (PSS) is the replacement, defining security levels (privileged, baseline, restricted) that can be enforced via admission controllers or labels for gradual migration."},{id:55,category:"expert",question:"What are Admission Controllers?",answer:"Admission Controllers are plugins that intercept API requests before objects are persisted to etcd. They can validate, mutate, or reject requests. Examples include ResourceQuota, PodSecurityPolicy, and MutatingAdmissionWebhook. They enforce cluster policies and can modify resource specifications."},{id:56,category:"expert",question:"What is a Mutating Admission Webhook?",answer:"A Mutating Admission Webhook allows external services to modify Kubernetes objects during the admission process. It's called before validation and can inject sidecars, modify resource requests, or add labels. Popular use cases include service mesh injection and policy enforcement."},{id:57,category:"expert",question:"What is a Validating Admission Webhook?",answer:"A Validating Admission Webhook allows external services to validate Kubernetes objects during admission. Called after mutation, it can accept or reject requests based on custom business logic. It's useful for enforcing complex policies that can't be expressed with standard validation."},{id:58,category:"expert",question:"What is the Container Network Interface (CNI)?",answer:"CNI is a specification and set of libraries for configuring network interfaces in Linux containers. Kubernetes uses CNI plugins to set up Pod networking. Popular CNI plugins include Calico, Flannel, Weave, and Cilium, each providing different networking models and features."},{id:59,category:"expert",question:"What is the Container Storage Interface (CSI)?",answer:"CSI is a standard interface between container orchestrators and storage systems. It allows storage vendors to write plugins that work across orchestrators without modification. CSI drivers can provision, attach, mount, and manage storage volumes dynamically."},{id:60,category:"expert",question:"What are Pod Disruption Budgets (PDB)?",answer:"PDBs limit the number of Pods that can be simultaneously disrupted during voluntary disruptions like node maintenance or cluster upgrades. They specify the minimum available or maximum unavailable Pods, helping maintain application availability during planned maintenance."},{id:61,category:"expert",question:"What is the Kubernetes Garbage Collector?",answer:"The Garbage Collector automatically deletes objects that no longer have owners, preventing resource leaks. It uses owner references to track relationships and cascading deletion policies (Foreground, Background, Orphan) to determine deletion behavior. It manages ReplicaSets when Deployments are deleted."},{id:62,category:"expert",question:"What are Finalizers in Kubernetes?",answer:"Finalizers are keys in object metadata that prevent deletion until specific cleanup tasks complete. Controllers add finalizers before creating dependent resources and remove them after cleanup. This ensures proper resource cleanup and prevents orphaned resources during deletion."},{id:63,category:"expert",question:"What is the Kubernetes Device Plugin framework?",answer:"Device Plugins enable nodes to advertise system hardware resources (like GPUs, FPGAs, or network devices) to kubelet. They run as DaemonSets and implement the Device Plugin API, allowing specialized hardware to be scheduled and allocated to Pods as extended resources."},{id:64,category:"expert",question:"What is Cluster Autoscaling?",answer:"Cluster Autoscaler automatically adjusts the size of node pools based on Pod resource demands. It adds nodes when Pods can't be scheduled due to resource constraints and removes nodes when they're consistently underutilized, optimizing costs while maintaining application performance."},{id:65,category:"expert",question:"What is Vertical Pod Autoscaling (VPA)?",answer:"VPA automatically adjusts CPU and memory requests/limits for containers based on actual resource usage patterns. Unlike HPA which scales replicas, VPA scales individual Pod resources. It can update running Pods or provide recommendations for better resource allocation."},{id:66,category:"expert",question:"What are Quality of Service (QoS) classes?",answer:"QoS classes determine Pod scheduling and eviction priority based on resource requests and limits. Guaranteed (requests = limits), Burstable (requests < limits), and BestEffort (no requests/limits). During resource pressure, BestEffort Pods are evicted first, then Burstable, then Guaranteed."},{id:67,category:"expert",question:"What is the Kubernetes Scheduler Framework?",answer:"The Scheduler Framework is a pluggable architecture that allows customizing scheduling behavior through plugins. It defines extension points (PreFilter, Filter, Score, Bind) where plugins can influence scheduling decisions. This enables custom scheduling logic without modifying the scheduler core."},{id:68,category:"expert",question:"What are Multi-tenancy strategies in Kubernetes?",answer:"Multi-tenancy strategies include: Namespace-based (soft isolation), Cluster-per-tenant (strong isolation), Virtual clusters (cluster API), and node isolation. Each approach balances security, resource efficiency, and operational overhead. Network policies, RBAC, and resource quotas provide additional isolation."},{id:69,category:"expert",question:"What is GitOps in the context of Kubernetes?",answer:"GitOps is a deployment methodology where Git repositories serve as the single source of truth for infrastructure and application configuration. Tools like ArgoCD or Flux monitor Git repositories and automatically sync changes to Kubernetes clusters, enabling declarative, auditable, and reversible deployments."},{id:70,category:"expert",question:"What are Service Meshes and their integration with Kubernetes?",answer:"Service Meshes (like Istio, Linkerd, Consul Connect) provide inter-service communication, security, and observability through sidecar proxies. They integrate with Kubernetes using admission controllers to inject sidecars, CRDs for configuration, and operate at the application layer for advanced traffic management."},{id:71,category:"expert",question:"What is the Kubernetes Control Plane's high availability setup?",answer:"HA control plane requires multiple master nodes with load balancing, replicated etcd cluster (odd number of nodes), and external load balancer for API server access. Components like scheduler and controller-manager use leader election. Proper network and storage configuration ensures resilience to node failures."},{id:72,category:"expert",question:"What are the security considerations for Kubernetes clusters?",answer:"Key security considerations include: RBAC for access control, network policies for micro-segmentation, Pod security standards, secrets management, container image scanning, regular updates, admission controllers for policy enforcement, audit logging, and principle of least privilege for service accounts."},{id:73,category:"expert",question:"What is the Kubernetes API machinery?",answer:"API machinery provides the building blocks for Kubernetes APIs, including serialization, versioning, conversion, validation, and storage. It includes concepts like Schemes (type registration), RESTful storage interfaces, and admission control. This machinery enables consistent API behavior across all Kubernetes resources."},{id:74,category:"expert",question:"What are the patterns for managing stateful applications in Kubernetes?",answer:"Patterns include: StatefulSets for ordered deployment, persistent volumes for data persistence, headless services for direct Pod access, init containers for setup, operators for complex lifecycle management, and backup/restore strategies. Consider data gravity, scaling characteristics, and consistency requirements."},{id:75,category:"expert",question:"What are Kubernetes performance optimization best practices?",answer:"Best practices include: right-sizing resource requests/limits, using HPA/VPA for auto-scaling, optimizing container images, implementing proper probes, using node affinity for data locality, monitoring resource utilization, tuning scheduler configurations, and implementing efficient logging/monitoring strategies."}],s=[{id:1,category:"basics",question:"What is Kubernetes primarily used for?",options:["Database management","Container orchestration","Network security","File storage"],correctAnswer:1},{id:2,category:"basics",question:"What is the smallest deployable unit in Kubernetes?",options:["Container","Pod","Service","Node"],correctAnswer:1},{id:3,category:"basics",question:"Which command-line tool is used to interact with Kubernetes clusters?",options:["kubeadm","kubectl","kubelet","kube-proxy"],correctAnswer:1},{id:4,category:"basics",question:"What does a Kubernetes Service provide?",options:["Container runtime","Stable network endpoint for Pods","Storage for applications","CPU resources"],correctAnswer:1},{id:5,category:"basics",question:"Which component manages the Kubernetes cluster state?",options:["kubelet","kube-proxy","Control Plane","Container runtime"],correctAnswer:2},{id:6,category:"basics",question:"What is a Kubernetes Namespace used for?",options:["Running containers","Dividing cluster resources","Storing data","Network routing"],correctAnswer:1},{id:7,category:"basics",question:"What are Kubernetes Labels used for?",options:["Storing sensitive data","Identifying and selecting resources","Running applications","Managing storage"],correctAnswer:1},{id:8,category:"basics",question:"What is the default Service type in Kubernetes?",options:["NodePort","LoadBalancer","ClusterIP","ExternalName"],correctAnswer:2},{id:9,category:"basics",question:"Which component runs on every Kubernetes node?",options:["API Server","etcd","kubelet","Scheduler"],correctAnswer:2},{id:10,category:"basics",question:"What stores all cluster data in Kubernetes?",options:["kubelet","API Server","etcd","Controller Manager"],correctAnswer:2},{id:11,category:"basics",question:"Which Service type exposes a static port on each node?",options:["ClusterIP","NodePort","LoadBalancer","ExternalName"],correctAnswer:1},{id:12,category:"basics",question:"What is the role of kube-proxy?",options:["Container management","Network proxy for Services","Storage management","Cluster scheduling"],correctAnswer:1},{id:13,category:"basics",question:"What format are Kubernetes manifests typically written in?",options:["JSON only","XML only","YAML or JSON","Plain text"],correctAnswer:2},{id:14,category:"basics",question:"What is the difference between a Pod and a Container?",options:["No difference","Pod is a wrapper around one or more containers","Container is larger than Pod","Pod runs inside Container"],correctAnswer:1},{id:15,category:"basics",question:"Which component decides where Pods should run?",options:["kubelet","kube-proxy","Scheduler","etcd"],correctAnswer:2},{id:16,category:"basics",question:"What happens when a Pod is deleted?",options:["It automatically restarts","It moves to another node","It is permanently removed","It goes into hibernation"],correctAnswer:2},{id:17,category:"basics",question:"What is the purpose of container ports in Pod specs?",options:["To actually open network ports","For documentation and tooling","To restrict network access","To enable clustering"],correctAnswer:1},{id:18,category:"basics",question:"Which API version is used for core resources like Pods?",options:["apps/v1","v1","batch/v1","networking.k8s.io/v1"],correctAnswer:1},{id:19,category:"basics",question:"What are Annotations used for?",options:["Selecting resources","Storing non-identifying metadata","Creating services","Managing replicas"],correctAnswer:1},{id:20,category:"basics",question:"What does the targetPort field specify in a Service?",options:["Service port","External port","Pod/container port to forward traffic to","Node port"],correctAnswer:2},{id:21,category:"basics",question:"Which component provides the Kubernetes API?",options:["kubelet","API Server","etcd","Controller Manager"],correctAnswer:1},{id:22,category:"basics",question:"What is a Node in Kubernetes?",options:["A container","A worker machine that runs Pods","A network endpoint","A storage volume"],correctAnswer:1},{id:23,category:"basics",question:"LoadBalancer Service type is typically used with:",options:["On-premises clusters only","Cloud providers","Development environments","Testing purposes"],correctAnswer:1},{id:24,category:"intermediate",question:"What does a Kubernetes Deployment manage?",options:["Individual containers","ReplicaSets and Pods","Network policies","Storage volumes"],correctAnswer:1},{id:25,category:"intermediate",question:"What is the purpose of a ReplicaSet?",options:["Load balancing","Ensuring a specified number of Pod replicas","Data replication","Network routing"],correctAnswer:1},{id:26,category:"intermediate",question:"What do ConfigMaps store?",options:["Sensitive data only","Non-confidential configuration data","Container images","Network policies"],correctAnswer:1},{id:27,category:"intermediate",question:"How are Secrets different from ConfigMaps?",options:["No difference","Secrets are for sensitive data","Secrets are larger in size","Secrets cannot be mounted as volumes"],correctAnswer:1},{id:28,category:"intermediate",question:"What is the difference between Liveness and Readiness probes?",options:["No difference","Liveness restarts containers, Readiness controls traffic","Readiness restarts containers, Liveness controls traffic","Both restart containers"],correctAnswer:1},{id:29,category:"intermediate",question:"What do Resource Requests specify?",options:["Maximum resources a container can use","Minimum resources a container needs","Average resource usage","Resource pricing"],correctAnswer:1},{id:30,category:"intermediate",question:"What is a Kubernetes Job used for?",options:["Long-running services","Batch processing and finite tasks","Load balancing","Data storage"],correctAnswer:1},{id:31,category:"intermediate",question:"What does a DaemonSet ensure?",options:["High availability","A copy of a Pod runs on all nodes","Load balancing","Data persistence"],correctAnswer:1},{id:32,category:"intermediate",question:"When would you use a StatefulSet instead of a Deployment?",options:["For stateless applications","For applications requiring stable network identities","For better performance","For cost optimization"],correctAnswer:1},{id:33,category:"intermediate",question:"What are Init Containers used for?",options:["Running the main application","Setup tasks before main containers start","Load balancing","Data backup"],correctAnswer:1},{id:34,category:"intermediate",question:"What is RBAC in Kubernetes?",options:["Resource-Based Access Control","Role-Based Access Control","Rule-Based Access Control","Route-Based Access Control"],correctAnswer:1},{id:35,category:"intermediate",question:"What does HPA (Horizontal Pod Autoscaler) scale based on?",options:["Number of nodes","CPU utilization or custom metrics","Storage usage","Network traffic"],correctAnswer:1},{id:36,category:"intermediate",question:"What is a PersistentVolume (PV)?",options:["Temporary storage","Cluster-wide storage resource","Container filesystem","Network storage only"],correctAnswer:1},{id:37,category:"intermediate",question:"What does a PersistentVolumeClaim (PVC) represent?",options:["Available storage","A request for storage by a user","Storage configuration","Backup policy"],correctAnswer:1},{id:38,category:"intermediate",question:"What is the purpose of Node Selectors?",options:["Load balancing","Constraining Pod scheduling to specific nodes","Network routing","Storage allocation"],correctAnswer:1},{id:39,category:"intermediate",question:"What are Taints and Tolerations used for?",options:["Data encryption","Controlling Pod scheduling on nodes","Network security","Storage management"],correctAnswer:1},{id:40,category:"intermediate",question:"What does a Service Account provide?",options:["User authentication","Identity for processes running in Pods","Network access","Storage permissions"],correctAnswer:1},{id:41,category:"intermediate",question:"What is a CronJob used for?",options:["Real-time processing","Scheduled batch jobs","Load balancing","Data storage"],correctAnswer:1},{id:42,category:"intermediate",question:"What does a Storage Class enable?",options:["Static storage allocation","Dynamic provisioning of storage","Storage encryption","Storage backup"],correctAnswer:1},{id:43,category:"intermediate",question:"What is the default deployment strategy for Kubernetes Deployments?",options:["Recreate","Rolling Update","Blue-Green","Canary"],correctAnswer:1},{id:44,category:"intermediate",question:"What are Kubernetes Events?",options:["User actions","Objects providing insight into cluster activity","Error logs","Performance metrics"],correctAnswer:1},{id:45,category:"intermediate",question:"Volume types in Kubernetes include:",options:["emptyDir only","emptyDir, hostPath, persistentVolumeClaim","hostPath only","Network volumes only"],correctAnswer:1},{id:46,category:"intermediate",question:"What happens during a Rolling Update?",options:["All Pods are replaced at once","Pods are gradually replaced maintaining availability","The application stops completely","Only configuration is updated"],correctAnswer:1},{id:47,category:"intermediate",question:"Which probe type helps with slow-starting containers?",options:["Liveness probe","Readiness probe","Startup probe","Health probe"],correctAnswer:2},{id:48,category:"expert",question:"What do Kubernetes Network Policies control?",options:["Node communication","Pod-to-Pod network traffic","Internet access","Storage networking"],correctAnswer:1},{id:49,category:"expert",question:"What is a Kubernetes Operator?",options:["A human administrator","A method for packaging and managing applications with custom controllers","A network component","A storage driver"],correctAnswer:1},{id:50,category:"expert",question:"What do Custom Resource Definitions (CRDs) enable?",options:["Faster networking","Extending the Kubernetes API with custom resource types","Better storage","Enhanced security"],correctAnswer:1},{id:51,category:"expert",question:"What are Admission Controllers?",options:["User authentication systems","Plugins that intercept API requests before persistence","Network gateways","Storage controllers"],correctAnswer:1},{id:52,category:"expert",question:"What is the Container Network Interface (CNI)?",options:["A container runtime","A specification for configuring network interfaces","A storage interface","A security protocol"],correctAnswer:1},{id:53,category:"expert",question:"What do Pod Disruption Budgets (PDB) limit?",options:["CPU usage","Number of Pods disrupted during maintenance","Network bandwidth","Storage capacity"],correctAnswer:1},{id:54,category:"expert",question:"What are Finalizers used for?",options:["Starting containers","Preventing deletion until cleanup tasks complete","Network configuration","Performance optimization"],correctAnswer:1},{id:55,category:"expert",question:"What does Vertical Pod Autoscaling (VPA) adjust?",options:["Number of replicas","CPU and memory requests/limits","Network bandwidth","Storage size"],correctAnswer:1},{id:56,category:"expert",question:"Which QoS class has the highest priority during resource pressure?",options:["BestEffort","Burstable","Guaranteed","Standard"],correctAnswer:2},{id:57,category:"expert",question:"What is the Container Storage Interface (CSI)?",options:["A network protocol","A standard interface between orchestrators and storage systems","A security framework","A monitoring tool"],correctAnswer:1},{id:58,category:"expert",question:"What does Cluster Autoscaler adjust?",options:["Pod resources","Number of nodes in the cluster","Network bandwidth","Storage capacity"],correctAnswer:1},{id:59,category:"expert",question:"What is the primary purpose of a Service Mesh?",options:["Container orchestration","Inter-service communication and observability","Storage management","User authentication"],correctAnswer:1},{id:60,category:"expert",question:"What is GitOps in Kubernetes context?",options:["Git version control for code","Using Git repositories as source of truth for deployments","Git-based backup system","Git integration with CI/CD"],correctAnswer:1},{id:61,category:"expert",question:"High Availability control plane requires:",options:["Single master node","Multiple master nodes with load balancing","Multiple worker nodes","External database"],correctAnswer:1},{id:62,category:"expert",question:"What enables custom scheduling logic in Kubernetes?",options:["Custom controllers","Scheduler Framework with plugins","Admission controllers","Network policies"],correctAnswer:1},{id:63,category:"expert",question:"Device Plugins are used for:",options:["Network devices","Advertising specialized hardware resources","Storage devices","Monitoring devices"],correctAnswer:1},{id:64,category:"expert",question:"What do Mutating Admission Webhooks do?",options:["Delete objects","Modify objects during admission","Monitor cluster state","Backup data"],correctAnswer:1},{id:65,category:"expert",question:"Multi-tenancy in Kubernetes can be achieved through:",options:["Single cluster only","Namespaces, RBAC, and network policies","Node isolation only","Storage separation only"],correctAnswer:1},{id:66,category:"expert",question:"What is the Kubernetes Garbage Collector responsible for?",options:["Cleaning up log files","Deleting objects that no longer have owners","Removing unused images","Clearing cache data"],correctAnswer:1},{id:67,category:"expert",question:"Pod Security Standards define:",options:["Network security","Security levels for Pod specifications","Storage encryption","API security"],correctAnswer:1},{id:68,category:"expert",question:"What pattern do StatefulSets follow for Pod management?",options:["Random deployment","Ordered deployment and scaling","Parallel deployment","Round-robin deployment"],correctAnswer:1},{id:69,category:"expert",question:"The Kubernetes API machinery provides:",options:["Container runtime","Building blocks for Kubernetes APIs","Network protocols","Storage interfaces"],correctAnswer:1},{id:70,category:"expert",question:"Which component uses leader election in HA setups?",options:["kubelet","Scheduler and Controller Manager","kube-proxy","API Server"],correctAnswer:1}];export{e as categoryData,t as flashcards,s as quizQuestions};
//# sourceMappingURL=data-e2wp1IQt.js.map
